import getClosestMatchingSchemaSummary from './api/getClosestMatchingSchemaSummary.js';
import renderSimpleType from './helpers/renderSimpleType.js';

function stringForEmptyOrMixed(empty, mixed) {
	return mixed
		? empty
			? 'Text only (mixed, empty)'
			: 'Text and elements (mixed)'
		: empty
		? 'Nothing (empty)'
		: 'Elements only';
}

function percentualize(ratio) {
	return `${Math.round(ratio * 1000) / 10}%`;
}

export default function elementCommand(req, res) {
	res.caption(req.command.getLongName());

	const destroySpinner = res.spinner('Looking up schemas...');

	const schemaSummary = getClosestMatchingSchemaSummary(
		req.fdt.editorRepository.path,
		req.options.schema
	);
	const allElementSummaries = schemaSummary.getAllElements();
	const elementSummaries = allElementSummaries.filter((elementSummary) => {
		return elementSummary.localName === req.parameters.element;
	});

	destroySpinner();

	res.debug(`Reading from ${schemaSummary.package}`);
	res.debug(
		`Found ${elementSummaries.length} element definitions for element "${req.parameters.element}" across ${allElementSummaries.length} elements.`
	);

	if (!elementSummaries.length) {
		throw new res.ErrorWithSolution(
			`Element "${req.parameters.element}" is not registered.`,
			'Check your input for typos, or run `fdt elements` to get a list of all elements.'
		);
	}

	elementSummaries.forEach((elementSummary, index) => {
		res.caption(`Definition ${index + 1}`);

		res.indent();

		const contentModelString = elementSummary.getContentModelString();
		const childElements = elementSummary.getChildElements();
		const parentElements = elementSummary.getParentElements();
		const attributes = elementSummary.getAttributes();

		const props = {
			'Element name':
				elementSummary.localName +
				(elementSummary.isLocal ? ' (local)' : ''),
			'Namespace URI': elementSummary.namespaceURI,
			Documentation: elementSummary.documentation || '-',
			Contents: stringForEmptyOrMixed(
				elementSummary.isEmpty(),
				elementSummary.isMixed
			),
			'Contained by': `${
				parentElements.length
			} unique nodes (${percentualize(
				parentElements.length / allElementSummaries.length
			)})`,
			Contains: `${childElements.length} unique nodes (${percentualize(
				childElements.length / allElementSummaries.length
			)})`,
			Attributes: `${
				elementSummary.getAttributes().length
			} unique attributes`,
			'Default class':
				elementSummary
					.getAttributes()
					.filter((attr) => attr.localName === 'class')
					.map((attr) => attr.defaultValue)
					.filter((classAttr) => !!classAttr)
					.join(', ') || '-',
		};

		/* istanbul ignore else */
		if (schemaSummary.version[0] === 1) {
			delete props['Namespace URI'];
		}

		res.properties(props);

		const elementSimpleType = elementSummary.getSimpleType();
		if (elementSimpleType) {
			res.caption('Simple type');
			renderSimpleType(res, elementSimpleType);
		}

		if (contentModelString) {
			res.caption('Content model');
			res.debug(contentModelString);
		}

		if (childElements.length) {
			res.caption('Contains');
			res.debug(
				childElements
					.map((e) => e.localName + (e.isLocal ? ' (local)' : ''))
					.join(', ')
			);
		}

		if (parentElements.length) {
			res.caption('Contained by');
			res.debug(
				parentElements
					.map((e) => e.localName + (e.isLocal ? ' (local)' : ''))
					.join(', ')
			);
		}

		if (attributes.length) {
			res.caption('Attributes');
			res.debug(
				attributes
					.map(
						(attr) =>
							attr.localName +
							(attr.use === 'required' ? '*' : '')
					)
					.join(', ')
			);
		}

		res.outdent();
	});
}
