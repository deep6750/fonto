import restrictionFormatter from './restrictionFormatter.js';

const keyLength = 14;

function renderRestrictions(res, simpleType) {
	if (
		simpleType.restrictions &&
		Object.keys(simpleType.restrictions).length
	) {
		Object.keys(simpleType.restrictions).forEach((restriction) => {
			res.property(
				restrictionFormatter.formatType(restriction),
				restrictionFormatter.formatValue(
					restriction,
					simpleType.restrictions[restriction]
				),
				keyLength
			);
		});
	}
}

export default function renderSimpleType(res, simpleType) {
	if (simpleType.isBuiltIn()) {
		res.property('Built-in:', simpleType.localName || '-', keyLength);

		res.indent();
		renderRestrictions(res, simpleType);
		res.outdent();
	} else if (simpleType.isDerived()) {
		res.log('Derived:');
		res.indent();

		renderRestrictions(res, simpleType);

		const base = simpleType.getBase();
		if (base) {
			res.log('Base');
			res.indent();
			renderSimpleType(res, base);
			res.outdent();
		}

		res.outdent();
	} else if (simpleType.isList()) {
		res.log('List:');
		res.indent();

		renderRestrictions(res, simpleType);

		const itemType = simpleType.getItemType();
		if (itemType) {
			res.log('Item type');
			res.indent();
			renderSimpleType(res, itemType);
			res.outdent();
		}

		res.outdent();
	} else if (simpleType.isUnion()) {
		const memberTypes = simpleType.getMemberTypes();
		res.log(`Union: (${memberTypes.length} member types)`);
		res.indent();

		renderRestrictions(res, simpleType);

		if (memberTypes.length) {
			res.log('Member types');
			res.indent();
			memberTypes.forEach((memberSimpleType) => {
				renderSimpleType(res, memberSimpleType);
			});
			res.outdent();
		}

		res.outdent();
	} else {
		res.log(`Unknown simple type "${simpleType.variety}"`);
	}
}
