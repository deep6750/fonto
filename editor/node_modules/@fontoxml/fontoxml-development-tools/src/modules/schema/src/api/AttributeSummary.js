const INDEX = Symbol();
const SCHEMAFILE = Symbol();
const SIMPLETYPE_REF = Symbol();

export default class AttributeSummary {
	constructor(schemaFile, attributeDefinition) {
		this[SCHEMAFILE] = schemaFile;

		this[INDEX] = attributeDefinition.index;

		this[SIMPLETYPE_REF] = attributeDefinition.simpleTypeRef;

		this.localName = attributeDefinition.localName;
		this.use = attributeDefinition.use;
		this.defaultValue = attributeDefinition.defaultValue;

		// Schema version 1
		this.typeLocalName = attributeDefinition.typeLocalName;
		this.typeNamespace = attributeDefinition.typeNamespace;
		this.allowedValues = (attributeDefinition.allowedValues || []).sort();

		// Schema version 2
		this.namespaceURI = attributeDefinition.namespaceURI;
	}

	getElements() {
		return this[SCHEMAFILE].getAllElements()
			.filter((elementSummary) =>
				elementSummary.refersToAttributeIndex(this[INDEX])
			)
			.sort((a, b) => a.localName.localeCompare(b.localName));
	}

	getNamespace() {
		if (this[SCHEMAFILE].version[0] === 1) {
			if (this.localName.indexOf(':') !== -1) {
				return this.localName.split(':')[0];
			}
			return;
		}

		if (this.namespaceURI) {
			return this.namespaceURI;
		}
	}

	getSimpleType() {
		return this[SCHEMAFILE].getSimpleTypeByIndex(this[SIMPLETYPE_REF]);
	}
}
