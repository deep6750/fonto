import path from 'path';

export default async (moduleRegistration) => {
	moduleRegistration
		.registerCommand(
			'attribute',
			path.resolve(
				moduleRegistration.getPath(),
				'src',
				'command.attribute.controller.js'
			)
		)
		.setDescription(
			'Output schema information about a specific attribute. An attribute may have different definitions in the same schema, this command summarizes them all.'
		)
		.setLongDescription(
			'An attribute may have different definitions per schema.json because an attribute of the same name may have different valid options, defaults or data type in other elements.'
		)

		.setRequiresEditorRepository()
		.setRequiresEditorVersionToMatchFdt()

		.addParameter(
			'attribute',
			'The name of an attribute. Use either attributeName or elementName@attributeName.',
			true
		)
		.addOption(
			'schema',
			's',
			'In a multi-schema application, specify (a part of) the path to the source schema.json.',
			false
		)

		.addExample(
			`${moduleRegistration.getAppInfo().name} attribute id`,
			'Output information about all attribute definitions for @id if the application has only one schema.json.'
		)
		.addExample(
			`${moduleRegistration.getAppInfo().name} attribute id -s map`,
			'Output information about all attribute definitions for "id" if the application has one shell in a package named something with "map".'
		)
		.addExample(
			`${
				moduleRegistration.getAppInfo().name
			} attribute ol@class -s topic`,
			'Output information about the @class attribute on <ol> in a DITA shell matching "topic".'
		);
};
