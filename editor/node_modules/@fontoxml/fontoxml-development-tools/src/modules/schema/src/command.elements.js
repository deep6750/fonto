import path from 'path';

import createElementsTable from './api/createElementsTable.js';

export default async (moduleRegistration) => {
	const table = await createElementsTable(moduleRegistration);

	moduleRegistration
		.registerCommand(
			'elements',
			path.resolve(
				moduleRegistration.getPath(),
				'src',
				'command.elements.controller.js',
			),
		)
		.addAlias('list-elements')
		.setDescription(
			'Output a table with information about all elements in a schema.'
		)

		.setRequiresEditorRepository()
		.setRequiresEditorVersionToMatchFdt()

		.addOption(
			'schema',
			's',
			'In a multi-schema application, specify (a part of) the path to the source schema.json.',
			false
		)
		.addOption(
			new moduleRegistration.MultiOption('blacklist-ns').setDescription(
				'Do not list elements of this namespace, eg "mml".'
			)
		)
		.addOption(table.sortOption)
		.addOption(table.columnsOption)
		.addOption(table.exportOption)

		.addExample(
			`${moduleRegistration.getAppInfo().name} elements`,
			'Output information about all the elements if the application has only one schema.json.'
		)
		.addExample(
			`${moduleRegistration.getAppInfo().name} elements -s map`,
			'Output information about all the elements if the application has one shell in a package named something with "map".'
		)
		.addExample(
			`${
				moduleRegistration.getAppInfo().name
			} elements -s packages/non-standard-schema-package/src/data.json`,
			'Output information about all the elements from a schema.json in a non-standard location.'
		)
		.addExample(
			`${
				moduleRegistration.getAppInfo().name
			} elements --blacklist-ns xml`,
			'Output information about all the elements, but do not output elements from the xml namespace.'
		);
};
