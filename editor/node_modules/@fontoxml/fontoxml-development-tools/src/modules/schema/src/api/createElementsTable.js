export default async function createElementsTable(moduleRegistration) {
	const FdtTable = await moduleRegistration.getExportFromModule(
		'@fontoxml/fontoxml-development-tools-module-shared',
		'FdtTable',
	);

	return new FdtTable(moduleRegistration, [
		{
			name: 'name',
			default: true,
			label: 'Name',
			value: (element) => element.localName,
		},
		{
			name: 'ns',
			default: true,
			label: 'Namespace',
			value: (element) => element.getNamespace(),
		},
		{
			name: 'local',
			default: true,
			label: 'Local',
			value: (element) => element.isLocal,
		},
		{
			name: 'desc',
			default: true,
			label: 'Description',
			value: (element) => element.documentation,
		},
		{
			name: 'cnt',
			label: 'Content model',
			value: (element) => element.getContentModelString(),
		},
		{
			name: 'empty',
			label: 'Empty',
			value: (element) => element.isEmpty(),
		},
		{
			name: 'mixed',
			label: 'Mixed',
			value: (element) => element.isMixed,
		},
		{
			name: 'abstract',
			label: 'Abstract',
			value: (element) => element.isAbstract,
		},
		{
			name: 'children',
			label: 'Contains',
			value: (element) =>
				element
					.getChildElements()
					.map((e) => e.localName + (e.isLocal ? ' (local)' : ''))
					.join(', '),
		},
		{
			name: 'parents',
			label: 'Contained by',
			value: (element) =>
				element
					.getParentElements()
					.map((e) => e.localName + (e.isLocal ? ' (local)' : ''))
					.join(', '),
		},
		{
			name: 'attrs',
			label: 'Attributes',
			value: (element) =>
				element
					.getAttributes()
					.map(
						(attr) =>
							attr.localName +
							(attr.use === 'required' ? '*' : '')
					)
					.join(', '),
		},
		{
			name: 'simpletype',
			label: 'Simple type',
			value: (element) => {
				const simpleType = element.getSimpleType();
				return simpleType ? simpleType.getSimpleTypeString() : null;
			},
		},
		{
			name: 'class',
			label: 'Class',
			value: (element) =>
				element
					.getAttributes()
					.filter((attr) => attr.localName === 'class')
					.map((attr) => attr.defaultValue)
					.filter((classAttr) => !!classAttr)
					.join(', '),
		},
	]);
}
