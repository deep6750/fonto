import fastGlob from 'fast-glob';
import path from 'path';
import { readFileSync } from 'fs';

import AttributeSummary from './AttributeSummary.js';
import ElementSummary from './ElementSummary.js';
import SimpleTypeSummary from './SimpleTypeSummary.js';
import getSchemaLocationsFromSource from './getSchemaLocationsFromSource.js';

function findConfigurationSettings(instance) {
	const pathPieces = instance.path.split(path.sep);
	const packageRootIndex = pathPieces.findIndex(
		(piece) =>
			[
				'packages',
				'packages-shared',
				'platform',
				'platform-linked',
			].indexOf(piece) >= 0
	);

	instance.locations = [];

	if (packageRootIndex === -1) {
		// throw new Error('Schema is not in a packages directory');
		return;
	}

	instance.package = pathPieces[packageRootIndex + 1];

	const schemaLocationsDirectory = path.resolve(
		'/',
		...pathPieces.slice(0, packageRootIndex + 2),
		'src',
	);
	const schemaLocationsPath = fastGlob.sync('SCHEMA_LOCATIONS.*', {
		cwd: schemaLocationsDirectory,
		absolute: true,
		deep: 0,
	})[0];

	if (!schemaLocationsPath) {
		return;
	}

	try {
		instance.locations = getSchemaLocationsFromSource(schemaLocationsPath);
	} catch (_error) {
		// Continue
	}
}

const ATTRIBUTES = Symbol();
const DATA = Symbol();
const ELEMENTS = Symbol();
const LOCAL_ELEMENTS = Symbol();
const SIMPLETYPES = Symbol();

export default class SchemaSummary {
	constructor(schemaPathOrData) {
		const isInitializedWithData = typeof schemaPathOrData === 'object';
		this.path = !isInitializedWithData ? schemaPathOrData : undefined;
		this.package = null;
		this.locations = [];

		if (isInitializedWithData) {
			this[DATA] = schemaPathOrData;
		} else {
			findConfigurationSettings(this);

			try {
				this[DATA] = JSON.parse(
					readFileSync(path.resolve(this.path), 'utf8')
				);
			} catch (_error) {
				throw new Error('Could not read schema file.');
			}
		}

		if (!this[DATA].version) {
			throw new Error('Missing schema version.');
		}

		if (!Array.isArray(this[DATA].version)) {
			throw new Error('Invalid schema version format.');
		}

		this.version = this[DATA].version;

		if (!this[DATA].localElements) {
			this[DATA].localElements = [];
		}

		this[DATA].simpleTypes = this[DATA].simpleTypes.map((simpleType, i) =>
			Object.assign(simpleType, {
				index: i,
			})
		);

		this[DATA].elements = this[DATA].elements.map((element, i) =>
			Object.assign(element, {
				isLocal: false,
				index: i,
			})
		);

		this[DATA].localElements = this[DATA].localElements.map((element, i) =>
			Object.assign(element, {
				isLocal: true,
				index: i,
			})
		);

		this[DATA].attributes = this[DATA].attributes.map((attribute, i) =>
			Object.assign(attribute, {
				index: i,
			})
		);

		this[DATA].contentModels = this[DATA].contentModels.map(
			(contentModel, i) =>
				Object.assign(contentModel, {
					index: i,
				})
		);

		this[ATTRIBUTES] = [];
		this[ELEMENTS] = [];
		this[LOCAL_ELEMENTS] = [];
		this[SIMPLETYPES] = [];
	}

	getSchemaVersionString() {
		return this.version.join('.');
	}

	getSimpleTypeByIndex(i) {
		if (i === undefined || !this[DATA].simpleTypes[i]) {
			return null;
		}

		if (!this[SIMPLETYPES][i]) {
			this[SIMPLETYPES][i] = new SimpleTypeSummary(
				this,
				this[DATA].simpleTypes[i]
			);
		}

		return this[SIMPLETYPES][i];
	}

	getAllSimpleTypes() {
		return this[DATA].simpleTypes.map((simpleType) =>
			this.getSimpleTypeByIndex(simpleType.index)
		);
	}

	getElementByIndex(i) {
		if (i === undefined || !this[DATA].elements[i]) {
			return null;
		}

		if (!this[ELEMENTS][i]) {
			this[ELEMENTS][i] = new ElementSummary(
				this,
				this[DATA].elements[i]
			);
		}

		return this[ELEMENTS][i];
	}

	getLocalElementByIndex(i) {
		if (i === undefined || !this[DATA].localElements[i]) {
			return null;
		}

		if (!this[LOCAL_ELEMENTS][i]) {
			this[LOCAL_ELEMENTS][i] = new ElementSummary(
				this,
				this[DATA].localElements[i]
			);
		}

		return this[LOCAL_ELEMENTS][i];
	}

	getAllElements() {
		return this.getAllGlobalElements().concat(this.getAllLocalElements());
	}

	getAllGlobalElements() {
		return this[DATA].elements.map((element) =>
			this.getElementByIndex(element.index)
		);
	}

	getAllLocalElements() {
		return this[DATA].localElements.map((element) =>
			this.getLocalElementByIndex(element.index)
		);
	}

	getAttributeByIndex(i) {
		if (i === undefined || !this[DATA].attributes[i]) {
			return null;
		}

		if (!this[ATTRIBUTES][i]) {
			this[ATTRIBUTES][i] = new AttributeSummary(
				this,
				this[DATA].attributes[i]
			);
		}

		return this[ATTRIBUTES][i];
	}

	getAllAttributes() {
		return this[DATA].attributes.map((attribute) =>
			this.getAttributeByIndex(attribute.index)
		);
	}

	getContentModelByIndex(i) {
		if (i === undefined || !this[DATA].contentModels[i]) {
			return null;
		}

		return this[DATA].contentModels[i];
	}

	getAllContentModels() {
		return this[DATA].contentModels.map((contentModel) =>
			this.getContentModelByIndex(contentModel.index)
		);
	}

	matchesSearchString(str) {
		if (this.package && this.package.indexOf(str) >= 0) {
			return true;
		}

		if (
			this.locations &&
			this.locations.some(
				(schemaLocation) => schemaLocation.indexOf(str) >= 0
			)
		) {
			return true;
		}

		return false;
	}
}
