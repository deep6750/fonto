import fs from 'fs-extra';
import os from 'os';
import path from 'path';

/**
 * Validate the schema fonto.json file contents.
 *
 * @param {string} fontoJson The schema fonto.json contents.
 *
 * @throws If the schema fonto Json is invalid.
 */
export function validateSchemaFontoJson(fontoJson) {
	if (!fontoJson.rootSchemas) {
		throw new Error('Missing "rootSchemas" property in fonto.json.');
	}

	if (
		typeof fontoJson.rootSchemas !== 'object' ||
		Array.isArray(fontoJson.rootSchemas)
	) {
		throw new Error(
			'The "rootSchemas" property is not an object in fonto.json.'
		);
	}

	const xsdPaths = Object.keys(fontoJson.rootSchemas);
	const requireLocations = xsdPaths.length > 1;
	xsdPaths.forEach((xsdPath) => {
		const schemaPackage = fontoJson.rootSchemas[xsdPath];

		if (typeof schemaPackage !== 'object' || Array.isArray(schemaPackage)) {
			throw new Error(
				`Root schema "${xsdPath}" is not an object in fonto.json.`
			);
		}

		if (!schemaPackage.packageName) {
			throw new Error(
				`Root schema "${xsdPath}" does not have a valid "packageName" property in fonto.json.`
			);
		}

		// If there are multiple root schemas, the location property is required.
		if (
			requireLocations &&
			(!schemaPackage.locations || !schemaPackage.locations.length)
		) {
			const error = new Error(
				!schemaPackage.locations
					? `Root schema "${xsdPath}" is missing the "locations" property, which is required when having multipe root schemas in fonto.json.`
					: `Root schema "${xsdPath}" has an empty "locations" property, which is not allowed when having multipe root schemas in fonto.json.`
			);

			const solution = [
				'Make sure to set locations for each schema in fonto.json when having multipe root schemas.',
				'See: https://documentation.fontoxml.com/latest/schema-experiences-7d818ffb9db5',
			];

			error.solution = solution.join(os.EOL);
			throw error;
		}

		// Validate the locations property, if there is any.
		if (
			schemaPackage.locations &&
			(!Array.isArray(schemaPackage.locations) ||
				schemaPackage.locations.some(
					(schemaLocation) =>
						typeof schemaLocation !== 'string' || !schemaLocation
				))
		) {
			throw new Error(
				`Root schema "${xsdPath}" has an invalid "locations" property in fonto.json.`
			);
		}
	});
}

/**
 * Get the schema fonto.json file contents.
 *
 * @param {string} inputPath Path to the source schema files.
 *
 * @return {Promise<Object>} Returns the contents of fonto.json.
 *
 * @async
 * @throws If the required directory or files do not exist or the schema fonto json is invalid.
 */
export default async function getSchemaFontoJson(inputPath) {
	if (!inputPath) {
		throw new Error('Schema source path is not set.');
	}

	try {
		await fs.access(inputPath);
	} catch (_error) {
		throw new Error('Schema source path does not exist.');
	}

	try {
		await fs.access(path.join(inputPath, 'fonto.json'), fs.constants.R_OK);
	} catch (_error) {
		throw new Error(
			'The required fonto.json file in the schema source path does not exist.'
		);
	}

	let fontoJson;
	try {
		fontoJson = await fs.readJson(path.join(inputPath, 'fonto.json'));
	} catch (_error) {
		throw new Error('The required fonto.json could not be parsed.');
	}

	validateSchemaFontoJson(fontoJson);

	return fontoJson;
}
