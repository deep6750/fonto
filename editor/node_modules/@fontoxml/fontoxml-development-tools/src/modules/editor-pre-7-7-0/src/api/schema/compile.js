import { File, FormData, request } from 'undici';

/**
 * Compile a schema zip archive using the schema compile service.
 *
 * @param {string}      baseUrl           The base URL for the schema compiler backend.
 * @param {Buffer}      compressedSchema  The compressed schema zip archive to compile.
 * @param {FdtResponse} res
 *
 * @return {Promise<Object>} The response from the schema compile service.
 */
export default async (baseUrl, compressedSchema, res) => {
	let response;
	try {
		let form;
		try {
			form = new FormData();
		} catch (error) {
			// The FormData class is not availible before node version 16, and the error
			// when not meeting that requirement was noninformative.
			throw new res.ErrorWithSolution(
				'Could not make a request to the license server.',
				'Please make sure you are using a compatible Node.js version.',
				error
			);
		}
		form.set(
			'schema',
			new File([compressedSchema], 'schema.zip', {
				type: 'application/zip',
			}),
			'schema.zip'
		);

		const compileUrl = new URL('api/compile', baseUrl);
		response = await request(compileUrl.href, {
			method: 'POST',
			body: form,
		});
	} catch (error) {
		if (error.solution) {
			throw error;
		}

		throw new res.ErrorWithInnerError(
			'Could not connect to the schema compile service.',
			error
		);
	}

	switch (response.statusCode) {
		case 200:
		case 400:
			try {
				return await response.body.json();
			} catch (error) {
				throw new res.ErrorWithInnerError(
					`Invalid response data from the schema compile service.`,
					error
				);
			}
		case 401:
		case 403:
			throw new Error(
				'You are not allowed to use the schema compile service.'
			);
		default:
			throw new Error(
				`Invalid response from the schema compile service (${response.statusCode}).`
			);
	}
};
