/** @typedef {import('../../../../../Version').default} Version */
/** @typedef {import('../../../../../response/FdtResponse').default} FdtResponse */

function addAddonIfNotIncluded(addons, addon) {
	if (!addons.includes(addon)) {
		addons.push(addon);
	}
}

/**
 * @param {{ addons: string[], manifest: Buffer }} data
 * @param {Version}                                currentVersion
 * @param {Version}                                sdkVersion
 * @param {FdtResponse}                            res
 */
export default async function preprocessData(
	data,
	currentVersion,
	sdkVersion,
	res
) {
	if (currentVersion.isPre7_0_0 && !sdkVersion.isPre7_0_0) {
		addAddonIfNotIncluded(data.addons, 'fontoxml-annotations');
		addAddonIfNotIncluded(
			data.addons,
			'fontoxml-clipboard-instruction-modal'
		);
		addAddonIfNotIncluded(data.addons, 'fontoxml-find-and-replace');
		addAddonIfNotIncluded(data.addons, 'fontoxml-special-characters');
		addAddonIfNotIncluded(data.addons, 'fontoxml-spell-checker');
		addAddonIfNotIncluded(data.addons, 'fontoxml-structure-view');
		addAddonIfNotIncluded(data.addons, 'fontoxml-xml-view');

		if (res) {
			res.break();
			res.notice(
				'The 7.0 release moved a number of features out of the platform and into add-ons. These feature ' +
					'add-ons have been pre-selected for your convenience. Please refer to the upgrade instructions ' +
					'in the Fonto documentation for more details.'
			);
			res.break();
		}

		const manifest = JSON.parse(data.manifest.toString('utf8'));
		if (manifest.edition === 'fontoxml-platform-dita') {
			addAddonIfNotIncluded(data.addons, 'fontoxml-dita');
			addAddonIfNotIncluded(data.addons, 'fontoxml-table-flow-cals');
			if (res) {
				res.notice(
					'DITA support is now available as an add-on. ' +
						'Please refer to the upgrade instructions in the Fonto documentation for more details.'
				);
				res.break();
			}
		}
	}
}
