import babel from '@babel/core';
import fs from 'fs-extra';
import path from 'path';

import createPackageDirectoryPath from '../createPackageDirectoryPath.js';
import writeAstProgramToFile from '../writeAstProgramToFile.js';

/**
 * Create a package manifest called fonto-manifest.json for a specific package, if the package
 * directory does not yet exists.
 *
 * @param {string} packageDirectoryPath The path to a single package directory.
 *
 * @return {Promise}
 */
async function createPackageManifestJsonFile(packageDirectoryPath) {
	// Only create the fonto-manifest.json file if the package directory does not exists.
	if (await fs.pathExists(packageDirectoryPath)) {
		return;
	}

	const manifestJsonFilePath = path.join(
		packageDirectoryPath,
		'fonto-manifest.json'
	);
	const manifestJsonFileContents = {
		dependencies: {},
	};

	await fs.outputJson(manifestJsonFilePath, manifestJsonFileContents, {
		spaces: '\t',
	});
}

/**
 * Create the schema file for a specific package.
 *
 * @param {string} packageDirectoryPath The path to a single package directory.
 * @param {string} packageName          The package name.
 * @param {Object} schemaData           The schema data for this package.
 *
 * @return {Promise}
 */
async function createPackageSchemaJsonFile(
	packageDirectoryPath,
	packageName,
	schemaData
) {
	const schemaJsonFilePath = path.join(
		packageDirectoryPath,
		'src',
		'assets',
		'schemas',
		`${packageName}.json`
	);

	await fs.outputJson(schemaJsonFilePath, schemaData);
}

/**
 * Create the SCHEMA_LOCATIONS.ts/js file for a specific package.
 *
 * @param {string}        packageDirectoryPath The path to a single package directory.
 * @param {Array<string>} schemaLocations      An array of schema locations for this package.
 * @param {boolean}       useTypeScript        Output TypeScript instead of JavaScript.
 *
 * @return {Promise}
 */
async function createPackageSchemaLocationsJsFile(
	packageDirectoryPath,
	schemaLocations = [],
	useTypeScript
) {
	const { types: t } = babel;

	const schemaLocationsFilePath = path.join(
		packageDirectoryPath,
		'src',
		`SCHEMA_LOCATIONS${useTypeScript ? '.ts' : '.js'}`
	);

	const schemaLocationsJsAst = t.program([
		t.exportDefaultDeclaration(
			t.arrayExpression(
				schemaLocations.map((schemaLocation) =>
					t.stringLiteral(schemaLocation)
				)
			)
		),
	]);

	await writeAstProgramToFile(schemaLocationsFilePath, schemaLocationsJsAst);

	await fs.remove(
		path.join(
			packageDirectoryPath,
			'src',
			useTypeScript ? 'SCHEMA_LOCATIONS.js' : 'SCHEMA_LOCATIONS.ts'
		)
	);
}

/**
 * Create a schema package from a compiled schema.
 *
 * @param {string}  outputPath                     The path of the Fonto Editor, or the schema source directory.
 * @param {Object}  schemaPackagesByXsdPath        The package information by xsd path.
 * @param {Object}  compiledSchemaResultsByXsdPath The compiled schema for a package by xsd path.
 * @param {string}  xsdPath                        The path of the xsd file for this package.
 * @param {boolean} useTypeScript                  Output TypeScript instead of JavaScript.
 *
 * @return {Promise}
 */
async function createSchemaPackageFromCompiledSchemaResults(
	outputPath,
	schemaPackagesByXsdPath,
	compiledSchemaResultsByXsdPath,
	xsdPath,
	useTypeScript
) {
	// Resolve the schema package directory path.
	const schemaPackage = schemaPackagesByXsdPath[xsdPath];
	const schemaPackageDirectoryPath = await createPackageDirectoryPath(
		outputPath,
		schemaPackage.packageName
	);

	await Promise.all([
		await createPackageManifestJsonFile(schemaPackageDirectoryPath),
		await createPackageSchemaJsonFile(
			schemaPackageDirectoryPath,
			schemaPackage.packageName,
			compiledSchemaResultsByXsdPath[xsdPath].schema
		),
		await createPackageSchemaLocationsJsFile(
			schemaPackageDirectoryPath,
			schemaPackage.locations,
			useTypeScript
		),
	]);
}

/**
 * Create all schema packages, will also create the fonto-manifest.json file when the package
 * directory does not yet exists.
 *
 * @param {string}  outputPath                     The path of the Fonto Editor, or the schema source directory.
 * @param {Object}  schemaPackagesByXsdPath        The package information by xsd path.
 * @param {Object}  compiledSchemaResultsByXsdPath The compiled schema for a package by xsd path.
 * @param {boolean} useTypeScript                  Output TypeScript instead of JavaScript.
 *
 * @return {Promise}
 */
export default async function createSchemaPackages(
	outputPath,
	schemaPackagesByXsdPath,
	compiledSchemaResultsByXsdPath,
	useTypeScript
) {
	await Promise.all(
		Object.keys(schemaPackagesByXsdPath).map((xsdPath) => {
			return createSchemaPackageFromCompiledSchemaResults(
				path.resolve(outputPath),
				schemaPackagesByXsdPath,
				compiledSchemaResultsByXsdPath,
				xsdPath,
				useTypeScript
			);
		})
	);
}
