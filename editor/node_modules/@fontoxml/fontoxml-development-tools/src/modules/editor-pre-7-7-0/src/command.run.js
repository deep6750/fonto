import path from 'path';

const EDITOR_RUN_DOCUMENTATION_URL =
	'https://documentation.fontoxml.com/latest/create-a-base-editor-c34231080298';

export default (moduleRegistration, editorCommand) => {
	editorCommand
		.addCommand(
			'run',
			path.resolve(
				moduleRegistration.getPath(),
				'src',
				'./command.run.controller.js',
			),
		)
		.setDescription(
			'Start a development server for running a Fonto Editor instance.'
		)
		.setLongDescription(
			`This server is intended for development purposes. You can also set some of the options, and more, by using a config.json or config.js file in your Fonto Editor repository. See the documentation for help with running Fonto Editor at ${EDITOR_RUN_DOCUMENTATION_URL}`
		)

		.setRequiresEditorRepository()
		.setRequiresEditorVersionToMatchFdt()

		.addOption(
			'body-parser-limit',
			undefined,
			'Controls the maximum request body size. (default=5mb)'
		)
		.addOption(
			'cache-control-disabled',
			'C',
			'Disable the Cache-Control header.'
		)
		.addOption(
			'cache-control-max-age',
			'c',
			'The value of max-age in the Cache-Control header, in seconds. Used for images and static files. (default=300; 5 minutes)'
		)
		.addOption(
			'delay',
			'D',
			'Simulate a delay on the request from the Fonto Editor instance to the development server, in milliseconds. (default=0)'
		)
		.addOption(
			'disable-dist-authentication',
			undefined,
			'Disable authentication in dist mode.'
		)
		.addOption(
			'dist',
			'd',
			'Serve the build (dist) directory, instead of the source files.'
		)
		.addOption(
			'lock-not-acquired',
			'l',
			'Serve the application without a lock acquired.'
		)
		.addOption(
			'lock-not-available',
			'L',
			'Serve the application without a lock available.'
		)
		.addOption('open', 'o', 'Open the browser after launching the server.')
		.addOption(
			'port',
			'p',
			'Listen on the specified port instead of listening on the default port (default=8080).'
		)
		.addOption(
			'memory-store-ttl',
			undefined,
			'Time to keep documents in the (session/shared) memory store. (default=3600; 1 hour)'
		)
		.addOption(
			'release-locks-on-state-request',
			undefined,
			'Document locks are released on every document state call.'
		)
		.addOption(
			'savemode',
			's',
			'Savemode for your documents. Asset uploads are always saved to disk.\n' +
				'disk:           Create new documents on disk, and save documents to disk. (default)\n' +
				'session-memory: Create new documents in memory, and save documents to memory. \n' +
				'                The memory store is unique for each session.\n' +
				'shared-memory:  Create new documents in memory, and save documents to memory.\n' +
				'                The memory store is shared between all sessions.\n' +
				'off:            Same as session-memory, but start a new session on refresh.'
		)
		.addOption('verbose', 'v', 'Set the server to be verbose.')

		.addExample(
			`${moduleRegistration.getAppInfo().name} editor run`,
			'Start the development server for the current Fonto Editor repository.'
		)
		.addExample(
			`${moduleRegistration.getAppInfo().name} editor run --port 8088`,
			'Start the development server for the current Fonto Editor repository on the non-default port 8088.'
		)
		.addExample(
			`${moduleRegistration.getAppInfo().name} editor run --dist`,
			'Start the development server for the current Fonto Editor repository, serving the (manually) built Fonto Editor instance instead of the source files.'
		);
};
