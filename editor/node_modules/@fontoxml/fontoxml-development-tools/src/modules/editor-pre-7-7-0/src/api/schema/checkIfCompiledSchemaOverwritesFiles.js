import fs from 'fs-extra';
import path from 'path';

/**
 * Check if the schema package already exists.
 *
 * @param {string}  outputPath          The path of the Fonto Editor, or the schema source directory.
 * @param {string}  packageName         The name of the package.
 * @param {boolean} includeManifestJson Include the fonto-manifest.json in the check.
 *
 * @return {Promise<Array<string>>}
 */
async function checkWhichPackageFilesExist(
	outputPath,
	packageName,
	includeManifestJson
) {
	const replaceInPackagesShared =
		(await fs.pathExists(
			path.join(outputPath, 'packages-shared', packageName)
		)) &&
		!(await fs.pathExists(path.join(outputPath, 'packages', packageName)));
	const packagesPath = replaceInPackagesShared
		? 'packages-shared'
		: 'packages';
	const packageFilePaths = [
		path.join(
			packagesPath,
			packageName,
			'src',
			'assets',
			'schemas',
			`${packageName}.json`
		),
		path.join(packagesPath, packageName, 'src', 'SCHEMA_LOCATIONS.js'),
		path.join(packagesPath, packageName, 'src', 'SCHEMA_LOCATIONS.ts'),
	];

	if (includeManifestJson) {
		packageFilePaths.push(
			path.join(packagesPath, packageName, 'fonto-manifest.json')
		);
	}

	const existingPackageFilePaths = [];
	for (const packageFilePath of packageFilePaths) {
		if (await fs.pathExists(path.join(outputPath, packageFilePath))) {
			existingPackageFilePaths.push(packageFilePath);
		}
	}

	return existingPackageFilePaths;
}

/**
 * Check if the compiled schema and its package overwrite existing schema packages.
 *
 * @param {string}  outputPath                  The path of the Fonto Editor, or the schema source directory.
 * @param {Object}  schemaPackagesByXsdPath     The package information by xsd path.
 * @param {boolean} [includeManifestJson=false] Include the fonto-manifest.json in the check.
 *
 * @return {Promise<Array<string>>}
 */
export default async function checkIfCompiledSchemaOverwritesFiles(
	outputPath,
	schemaPackagesByXsdPath,
	includeManifestJson = false
) {
	let existingPackagesFilePaths = [];
	for (const xsdPath in schemaPackagesByXsdPath) {
		existingPackagesFilePaths = existingPackagesFilePaths.concat(
			await checkWhichPackageFilesExist(
				outputPath,
				schemaPackagesByXsdPath[xsdPath].packageName,
				includeManifestJson
			)
		);
	}

	return existingPackagesFilePaths;
}
