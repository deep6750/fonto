import fastGlob from 'fast-glob';
import fs from 'fs-extra';
import path from 'path';
import { zip } from 'fflate';

/**
 * Create a Buffer containing the whole contents of the input path as a zip archive.
 *
 * @param {string}      inputPath The source path where the schema, including fonto.json and catalog.xml, are located.
 * @param {FdtResponse} res
 *
 * @return {Promise<Buffer>} The zipped schema source directory as an zip archive buffer.
 */
export default async function zipSchemaSource(inputPath, res) {
	try {
		const files = await fastGlob(['fonto.json', '**/*.@(xml|xsd)'], {
			cwd: inputPath,
			followSymbolicLinks: true,
		});
		const zipFiles = {};
		for (const file of files) {
			const fileData = await fs.readFile(path.join(inputPath, file));
			const pathParts = [];
			let dir = file;
			while ((dir = path.posix.dirname(dir)) !== '.') {
				pathParts.unshift(path.posix.basename(dir));
			}
			let directory = zipFiles;
			for (const pathPart of pathParts) {
				directory = directory[pathPart] = directory[pathPart] || {};
			}
			directory[path.posix.basename(file)] = fileData;
		}

		const zipArchive = await new Promise((resolve, reject) =>
			zip(zipFiles, { consume: true }, (error, data) => {
				if (error) {
					reject(error);
					return;
				}
				resolve(data);
			}),
		);

		return zipArchive;
	} catch (innerError) {
		throw new res.ErrorWithInnerError(
			'Could not create zip archive of schema source to send to compiler.',
			innerError
		);
	}
}
