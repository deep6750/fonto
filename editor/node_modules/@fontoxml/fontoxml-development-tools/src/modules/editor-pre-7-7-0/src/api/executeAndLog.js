import { supportsColor } from 'chalk';
import cp from 'child_process';
import os from 'os';

export default (
	res,
	command,
	args,
	currentWorkingDirectoryPath,
	showStdout,
	showStderr,
	processCreatedCallback
) => {
	return new Promise((resolve, reject) => {
		const errors = [];
		const env = { ...process.env };

		if (supportsColor) {
			env.FORCE_COLOR = true;
		}

		if (command === 'npm' && os.platform() === 'win32') {
			command = 'npm.cmd';
		}

		const childProcess = cp.spawn(command, args, {
			cwd: currentWorkingDirectoryPath,
			env,
		});

		if (processCreatedCallback) {
			processCreatedCallback(process);
		}

		childProcess.stdout.on('data', (data) => {
			if (showStdout) {
				res.raw(data);
			}
		});

		childProcess.stderr.on('data', (data) => {
			if (showStderr) {
				res.raw(data);
			} else {
				errors.push(data.toString());
			}
		});

		childProcess.on('error', (error) => {
			res.error(error);
		});

		childProcess.on('close', (code) => {
			if (code === 0) {
				resolve();
			} else {
				if (!showStderr) {
					errors.forEach((error) => res.log(error));
				}
				reject(
					new Error(
						`${command} ${args.join(' ')} exited with code ${code}`
					)
				);
			}
		});
	});
};
