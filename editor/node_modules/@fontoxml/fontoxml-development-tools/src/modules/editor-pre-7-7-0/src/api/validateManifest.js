const SOLUTION = 'Please check and fix the Fonto Editor manifest.json file.';

export default (manifestBuffer, res) => {
	let manifest;
	try {
		manifest = JSON.parse(manifestBuffer.toString('utf8'));
	} catch (_error) {
		throw new res.ErrorWithSolution(
			'The Fonto Editor manifest.json file could not be parsed.',
			SOLUTION
		);
	}

	// Only validates the required properties.

	if (typeof manifest !== 'object') {
		throw new res.ErrorWithSolution(
			'The Fonto Editor manifest file should contain an JSON object.',
			SOLUTION
		);
	}

	if (!manifest.name || typeof manifest.name !== 'string') {
		throw new res.ErrorWithSolution(
			'The Fonto Editor manifest file contains an invalid name.',
			SOLUTION
		);
	}

	if (!manifest.sdkVersion || typeof manifest.sdkVersion !== 'string') {
		throw new res.ErrorWithSolution(
			'The Fonto Editor manifest file contains an invalid sdkVersion.',
			SOLUTION
		);
	}

	if (manifest.addonNames) {
		if (
			!Array.isArray(manifest.addonNames) ||
			manifest.addonNames.some(
				(addonName) => typeof addonName !== 'string'
			)
		) {
			throw new res.ErrorWithSolution(
				'The Fonto Editor manifest file contains invalid addonNames.',
				SOLUTION
			);
		}
	}

	if (manifest.legacyAddonNames) {
		if (
			!Array.isArray(manifest.legacyAddonNames) ||
			manifest.legacyAddonNames.some(
				(legacyAddonName) => typeof legacyAddonName !== 'string'
			)
		) {
			throw new res.ErrorWithSolution(
				'The Fonto Editor manifest file contains invalid legacyAddonNames.',
				SOLUTION
			);
		}
	}
};
