import babel from '@babel/core';

import addCommentToAstNode from '../addCommentToAstNode.js';
import createCommentsForElement from './createCommentsForElement.js';

/** @typedef {import('../../../../../Version').default} Version */

const t = babel.types;
const template = babel.template;

const buildConfigureAsRemoved = template(
	'configureAsRemoved(sxModule, SELECTOR);'
);

/**
 * Builds an array of Babel templates containing the schema experience configuration for the given elements.
 *
 * @param {Object[]} elements             The sx configuration elements for which to create Babel templates.
 * @param {Object}   prefixByNamespaceUri The namespace URIs with their prefix.
 * @param {Version}  version              The version of the editor. Pre-7.17.0 versions had no xq template tags, so a different declaration wil be generated.
 *
 * @return {Object}
 */
export default function buildElementConfigurations(
	elements,
	prefixByNamespaceUri,
	version
) {
	return (
		elements
			// Sort the elements ascending by the localName property.
			.sort((a, b) =>
				a.localName < b.localName
					? -1
					: a.localName > b.localName
					? 1
					: 0
			)
			.map((element) => {
				const elementSelector = element.namespacePrefix
					? `self::${element.namespacePrefix}:${element.localName}`
					: `self::${element.localName}`;
				let stringTemplateExpression;
				if (version.isPre7_17_0) {
					stringTemplateExpression = t.stringLiteral(elementSelector);
				} else {
					const tag = t.identifier('xq');

					const quasi = t.templateLiteral(
						[t.templateElement({ raw: elementSelector })],
						[]
					);
					stringTemplateExpression = t.taggedTemplateExpression(
						tag,
						quasi
					);
				}
				const elementConfiguration = buildConfigureAsRemoved({
					SELECTOR: stringTemplateExpression,
				});

				const comments = createCommentsForElement(
					element,
					prefixByNamespaceUri
				);

				// Add preceding comments to the element configuration.
				addCommentToAstNode(elementConfiguration, comments);
				return elementConfiguration;
			})
	);
}
