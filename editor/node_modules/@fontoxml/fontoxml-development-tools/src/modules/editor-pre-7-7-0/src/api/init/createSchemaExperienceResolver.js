import babel from '@babel/core';

import addCommentToAstNode, {
	trickRecastIntoKeepingStatementsTogether,
} from '../addCommentToAstNode.js';
import writeAstProgramToFile from '../writeAstProgramToFile.js';

const t = babel.types;
const template = babel.template;

const buildConfigurationManagerImport = template(
	`import configurationManager from 'fontoxml-configuration/src/configurationManager';`
);

const buildSxManagerImport = template(
	`import sxManager from 'fontoxml-modular-schema-experience/src/sxManager';`
);

const buildSchemaLocationToSchemaExperienceResolverImport = template(
	`import SchemaLocationToSchemaExperienceResolver from 'fontoxml-schema-experience-resolver/src/SchemaLocationToSchemaExperienceResolver';`
);

const buildSchemaLocationsImport = template(
	`import SCHEMA_LOCATIONS_IMPORT_SPECIFIER from 'SCHEMA_LOCATIONS_IMPORT_SOURCE';`
);

const buildSchemaLocationToSchemaExperienceResolverInstance = template(
	`const schemaLocationToSchemaExperienceResolver = new SchemaLocationToSchemaExperienceResolver();`
);

const buildSchemaLocationToSchemaExperienceResolverRegister = template(
	`schemaLocationToSchemaExperienceResolver.register(
		sxManager.defineSchemaExperience('SCHEMA_JSON_PATH', ['PACKAGE_NAME']),
		LOCAL_IMPORT_SPECIFIER
	);`
);

const buildSingleSchemaExperienceResolverImport = template(
	`import SingleSchemaExperienceResolver from 'fontoxml-schema-experience-resolver/src/SingleSchemaExperienceResolver';`
);

const buildSingleSchemaExperienceResolverInstance = template(
	`const singleSchemaExperienceResolver = new SingleSchemaExperienceResolver(
		sxManager.defineSchemaExperience('SCHEMA_JSON_PATH', ['PACKAGE_NAME'])
	);`
);

const buildConfigurationManagerSetSchemaExperienceResolver = template(
	`configurationManager.set('schema-experience-resolver', SCHEMA_EXPERIENCE_RESOLVER);`
);

/**
 * Converts a name to a valid import specifier variable.
 *
 * @param {string} variableName
 *
 * @return {string}
 */
function transformNameToImportSpecifier(variableName) {
	const transformedVariablename = variableName
		.replace(/[^a-zA-Z0-9_]/g, '_')
		.toUpperCase()
		.replace(/^([0-9])/, '_$1');

	return `${transformedVariablename}_SCHEMA_LOCATIONS`;
}

/**
 * Adds the appropriate statements for the for the single schema experience resolver.
 *
 * @param {AstNode[]} importStatements  The import statements as AST nodes.
 * @param {AstNode[]} statements        The statements as AST nodes.
 * @param {string}    schemaPackageName The name of the schema package.
 */
function addStatementsForSingleSchemaExperienceResolver(
	importStatements,
	statements,
	schemaPackageName
) {
	importStatements.push(buildSingleSchemaExperienceResolverImport());

	const singleSchemaExperienceResolverInstance =
		buildSingleSchemaExperienceResolverInstance({
			SCHEMA_JSON_PATH: t.stringLiteral(
				`assets/schemas/${schemaPackageName}.json`
			),
			PACKAGE_NAME: schemaPackageName,
		});

	addCommentToAstNode(singleSchemaExperienceResolverInstance, [
		'Implements a schema experience resolver that always returns a single schema experience.',
		'For more information:',
		'https://documentation.fontoxml.com/latest/singleschemaexperienceresolver-e695cd645535',
	]);

	statements.push(
		singleSchemaExperienceResolverInstance,
		buildConfigurationManagerSetSchemaExperienceResolver({
			SCHEMA_EXPERIENCE_RESOLVER: 'singleSchemaExperienceResolver',
		})
	);

	trickRecastIntoKeepingStatementsTogether(
		singleSchemaExperienceResolverInstance
	);
}

/**
 * Adds the appropriate statements for the schema location to schema experience resolver.
 *
 * @param {AstNode[]} importStatements        The import statements as AST nodes.
 * @param {AstNode[]} statements              The statements as AST nodes.
 * @param {Object}    schemaPackagesByXsdPath The compiled schema for a package by xsd path.
 */
function addStatementsForSchemaLocationToSchemaExperienceResolver(
	importStatements,
	statements,
	schemaPackagesByXsdPath
) {
	importStatements.push(
		buildSchemaLocationToSchemaExperienceResolverImport()
	);

	const schemaLocationToSchemaExperienceResolverInstance =
		buildSchemaLocationToSchemaExperienceResolverInstance();
	addCommentToAstNode(schemaLocationToSchemaExperienceResolverInstance, [
		'Implements a schema experience resolver that determines the appropriate schema experience for',
		"each document based on the schema location, as specified in the document's XML.",
		'For more information:',
		'https://documentation.fontoxml.com/latest/schemalocationtoschemaexperienceresolver-531427aaf9f1',
	]);

	statements.push(schemaLocationToSchemaExperienceResolverInstance);

	Object.keys(schemaPackagesByXsdPath).forEach((xsdPath, index) => {
		const packageName = schemaPackagesByXsdPath[xsdPath].packageName;
		const importSpecifier = transformNameToImportSpecifier(packageName);

		const schemaLocationsImportStatement = buildSchemaLocationsImport({
			SCHEMA_LOCATIONS_IMPORT_SOURCE: t.stringLiteral(
				`${packageName}/src/SCHEMA_LOCATIONS`
			),
			SCHEMA_LOCATIONS_IMPORT_SPECIFIER: t.identifier(importSpecifier),
		});
		if (index === 0) {
			addCommentToAstNode(
				schemaLocationsImportStatement,
				'Import schema locations from all schema packages.'
			);
		}
		importStatements.push(schemaLocationsImportStatement);

		const schemaLocationToSchemaExperienceResolver =
			buildSchemaLocationToSchemaExperienceResolverRegister({
				LOCAL_IMPORT_SPECIFIER: t.identifier(importSpecifier),
				PACKAGE_NAME: t.stringLiteral(packageName),
				SCHEMA_JSON_PATH: t.stringLiteral(
					`assets/schemas/${packageName}.json`
				),
			});
		if (index === 0) {
			addCommentToAstNode(
				schemaLocationToSchemaExperienceResolver,
				'Register all schema packages with the schema locations to the schema experience resolver.'
			);
		}
		statements.push(schemaLocationToSchemaExperienceResolver);
	});

	const configurationManagerSetSchemaExperienceResolver =
		buildConfigurationManagerSetSchemaExperienceResolver({
			SCHEMA_EXPERIENCE_RESOLVER:
				'schemaLocationToSchemaExperienceResolver',
		});
	statements.push(configurationManagerSetSchemaExperienceResolver);

	trickRecastIntoKeepingStatementsTogether(
		schemaLocationToSchemaExperienceResolverInstance
	);
}

/**
 *  Creates the config/createSchemaExperienceResolver.ts/js file for the Editor.
 *
 *  @param {Object} schemaPackagesByXsdPath The compiled schema for a package by xsd path.
 *
 *  @return {ts.SourceFile}
 */
export function generateSchemaExperienceResolver(schemaPackagesByXsdPath) {
	const configurationManagerImportStatement = buildConfigurationManagerImport();
	addCommentToAstNode(configurationManagerImportStatement, [
		'The schema experience resolver is used to determine the schema experience to use when a document',
		'is loaded. Depending on the schema experience resolver being used, this allows an Editor to load',
		'the same schema experience for all documents, or to use multiple schema experiences depending on',
		'the content being loaded.',
		'For more information:',
		'https://documentation.fontoxml.com/latest/schema-experiences-7d818ffb9db5',
		'https://documentation.fontoxml.com/latest/sxmanager-5600d67cb175',
	]);

	const importStatements = [
		configurationManagerImportStatement,
		buildSxManagerImport(),
	];
	const statements = [];

	const schemaPackages = Object.values(schemaPackagesByXsdPath);

	if (
		schemaPackages.length === 1 &&
		(!schemaPackages[0].locations ||
			schemaPackages[0].locations.length === 0)
	) {
		addStatementsForSingleSchemaExperienceResolver(
			importStatements,
			statements,
			schemaPackages[0].packageName
		);
	} else {
		addStatementsForSchemaLocationToSchemaExperienceResolver(
			importStatements,
			statements,
			schemaPackagesByXsdPath
		);
	}

	trickRecastIntoKeepingStatementsTogether(
		configurationManagerImportStatement
	);

	// Creates the config/createSchemaExperienceResolver.ts/js file.
	const configSchemaExperienceResolverJsAst = t.program([
		...importStatements,
		...statements,
	]);

	return configSchemaExperienceResolverJsAst;
}

/**
 *  Creates the config/createSchemaExperienceResolver.ts/js file for the Editor.
 *
 *  @param {string} configSchemaExperienceResolverJsFilePath The path to the configuration file.
 *  @param {Object} schemaPackagesByXsdPath                  The compiled schema for a package by xsd path.
 *
 *  @return {Promise}
 */
export default async function createSchemaExperienceResolver(
	configSchemaExperienceResolverJsFilePath,
	schemaPackagesByXsdPath,
) {
	const configSchemaExperienceResolverJsAst =
		generateSchemaExperienceResolver(schemaPackagesByXsdPath);
	await writeAstProgramToFile(
		configSchemaExperienceResolverJsFilePath,
		configSchemaExperienceResolverJsAst
	);
}
