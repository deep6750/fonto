import path from 'path';

const EDITOR_UPGRADE_DOCUMENTATION_URL =
	'https://documentation.fontoxml.com/latest/upgrade-instructions-53f5b02b6e48';

export default (moduleRegistration, editorCommand, editorPre770ModulePath) => {
	editorCommand
		.addCommand(
			'upgrade',
			path.resolve(
				editorPre770ModulePath || moduleRegistration.getPath(),
				'src',
				'command.upgrade.controller.js',
			),
		)
		.setDescription('Upgrade an instance of Fonto Editor.')
		.setLongDescription(
			`See the documentation for help with upgrading a Fonto Editor instance at ${EDITOR_UPGRADE_DOCUMENTATION_URL}`
		)

		.setRequiresEditorRepository()
		.setRequiresEditorVersionToMatchFdt(true)

		// This might also use other product licenses, but they are handled remotely.
		.setRequiresLicenseValidation()
		.addRequiredProductLicenses(['editor'])

		.addOption(
			'non-interactive',
			undefined,
			'Use input from command line options only, and skip the interactive interface.'
		)

		// Flag is deprecated, but kept in code so that no breaking change is made
		// DEV-9386, DEV-10426
		.addHiddenOption(
			'remove-backup',
			'r',
			'Deprecated option to remove backups after completion. In the current version of FDT, backups are never created.'
		)

		.addOption(
			'version',
			undefined,
			`The version of Fonto Editor to upgrade to, which defaults to the same version as FDT. Can be either a specific version within the same minor range of the current FDT version, or a "nightly" version. Be warned: nightly can be unstable or may not work at all.`
		)

		.addExample(
			`${moduleRegistration.getAppInfo().name} editor upgrade`,
			'Upgrade the Fonto Editor instance to the version matching the current FDT version. Will prompt for input.'
		)
		.addExample(
			`${
				moduleRegistration.getAppInfo().name
			} editor upgrade --non-interactive`,
			'Upgrade the Fonto Editor instance in the current editor repository, without prompting for input or confirmation.'
		);
};
