import SchemaSummary from '../../../../schema/src/api/SchemaSummary.js';

// Special namespaces for which to use the preferred prefix.
const SPECIAL_NAMESPACES = {
	'http://www.w3.org/1998/Math/MathML': 'mml',
	'http://www.w3.org/1999/xlink': 'xlink',
	'http://www.w3.org/2000/svg': 'svg',
	'http://www.w3.org/2001/XInclude': 'xi',
};

// Common namespaces for which to use the preferred prefix. These will also be excluded when
// determening if a namespace should be set as default.
const COMMON_NAMESPACES = {
	'http://docbook.org/ns/docbook': 'docbook',
	'http://www.tei-c.org/ns/1.0': 'tei',
	'http://www.w3.org/1999/xhtml': 'xhtml',
};

/**
 * Builds the namespace configuration.
 *
 * @param {Object} compiledSchemaResultsByXsdPath The compiled schema for a package by xsd path.
 *
 * @return {Object.<string, string|null>} An object that holds the mapping between namespace URI's and their respective prefix.
 */
export default function getPrefixByNamespaceUri(
	compiledSchemaResultsByXsdPath
) {
	let hasNullNamespaceElements = false;

	// Get all unique namespaces.
	const namespaceUris = Object.values(compiledSchemaResultsByXsdPath).reduce(
		(acc, compiledSchema) => {
			const schemaSummary = new SchemaSummary(compiledSchema.schema);
			schemaSummary.getAllElements().forEach((elementSumary) => {
				const elementNamespace = elementSumary.getNamespace();

				if (!elementNamespace) {
					hasNullNamespaceElements = true;
					return;
				}

				acc.add(elementNamespace);
			});

			return acc;
		},
		new Set()
	);

	// Add prefixes for namespaces, sorted by namespaceUri.
	let namespaceNumber = 0;
	const prefixesByNamespaceUri = Array.from(namespaceUris)
		.sort((a, b) => a.localeCompare(b))
		.reduce((acc, namespaceUri) => {
			acc[namespaceUri] =
				SPECIAL_NAMESPACES[namespaceUri] ||
				COMMON_NAMESPACES[namespaceUri] ||
				`ns${++namespaceNumber}`;

			return acc;
		}, {});

	// If there is only one namespace, excluding special namespaces, and no null namespace elements,
	// make it the default namespace with prefix null.
	const namespacesToExclude = Object.keys(SPECIAL_NAMESPACES);
	const filteredNamespaceUris = Object.keys(prefixesByNamespaceUri).filter(
		(namespaceUri) => !namespacesToExclude.includes(namespaceUri)
	);
	if (!hasNullNamespaceElements && filteredNamespaceUris.length === 1) {
		const namespaceUri = filteredNamespaceUris[0];
		prefixesByNamespaceUri[namespaceUri] = null;
	}

	return prefixesByNamespaceUri;
}
