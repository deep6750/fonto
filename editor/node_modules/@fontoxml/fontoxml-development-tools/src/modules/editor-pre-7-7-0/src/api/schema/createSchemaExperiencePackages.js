import babel from '@babel/core';
import fs from 'fs-extra';
import os from 'os';
import path from 'path';

import addCommentToAstNode from '../addCommentToAstNode.js';
import createPackageDirectoryPath from '../createPackageDirectoryPath.js';
import createPrettifiedCode from '../createPrettifiedCode.js';
import writeAstProgramToFile from '../writeAstProgramToFile.js';
import buildElementConfigurations from './buildElementConfigurations.js';
import buildSchemaExperienceConfigurationModel from './buildSchemaExperienceConfigurationModel.js';

/** @typedef {import('../../../../../Version').default} Version */

const t = babel.types;
const template = babel.template;

const buildConfigureAsRemovedImport = template(
	`import configureAsRemoved from 'fontoxml-families/src/configureAsRemoved';`
);

const buildDefaultExportConfigureSxModule = template(
	`export default function configureSxModule(sxModule) {SX_CONFIGURATION}`
);
const buildDefaultExportConfigureSxModuleTS = template(
	`export default function configureSxModule(sxModule: SxModule): void {SX_CONFIGURATION}`,
	{
		plugins: ['typescript'],
	}
);

const buildDefaultExportInstall = template(
	'export default function install() {}'
);
const buildDefaultExportInstallTS = template(
	'export default function install(): void {}',
	{
		plugins: ['typescript'],
	}
);

const buildMarkAsAddon = template(`sxModule.markAsAddon();`);

const buildPivotModelTransformerManagerImport = template(
	`import pivotModelTransformerManager from 'fontoxml-pivot-model/src/pivotModelTransformerManager';`
);

const buildRegisterTransformers = template(
	'pivotModelTransformerManager.registerTransformers(sxModule, []);'
);

const buildXqImport = template(`import xq from 'fontoxml-selectors/src/xq';`);

const buildSxModuleTypeImport = template(
	`import type { SxModule } from 'fontoxml-modular-schema-experience/src/sxManager';`,
	{
		plugins: ['typescript'],
	}
);

// Configuration constants.
const PIVOT_MODEL_TRANSLATION_PACKAGE_NAME = 'editor-clipboard-configuration';

/**
 * Adds a reference from the given manifestFilePath to the given package.
 *
 * @param {string} manifestFilePath The path to the manifest file.
 * @param {string} packageName      The name of the package to add.
 *
 * @return {Promise}
 */
async function addPackageToManifestFile(manifestFilePath, packageName) {
	const content = await fs.readJson(manifestFilePath);

	content.dependencies[packageName] = path.posix.join(
		'packages',
		packageName
	);

	await fs.outputJson(manifestFilePath, content, { spaces: '\t' });
}

/**
 * Creates a configureSxModule.ts/js file for a schema experience package.
 *
 * @param {Object}   elements             The elements to configure.
 * @param {Object}   prefixByNamespaceUri The namespace URIs with their prefix.
 * @param {string[]} addons               The addons to include in the manifest file.
 * @param {Version}  version              The SDK version used to configure.
 * @param {boolean}  useTypeScript        Output TypeScript instead of JavaScript.
 *
 * @return {Promise<AstNode>}
 */
export async function generateConfigureSxModuleJS(
	elements,
	prefixByNamespaceUri,
	addons,
	version,
	useTypeScript
) {
	const elementConfigurations = buildElementConfigurations(
		elements,
		prefixByNamespaceUri,
		version
	);

	const defaultExportConfigureSxModuleStatement = useTypeScript
		? buildDefaultExportConfigureSxModuleTS({
				SX_CONFIGURATION: elementConfigurations,
		  })
		: buildDefaultExportConfigureSxModule({
				SX_CONFIGURATION: elementConfigurations,
		  });

	addCommentToAstNode(defaultExportConfigureSxModuleStatement, [
		'configureSxModule is meant for registering configuration for one or more schemas, such as element',
		'configuration and clipboard transformations. The sxModule argument represents the schema',
		'experience module for this package, and can extend, or be extended by, other packages.',
		'For more information:',
		'https://documentation.fontoxml.com/latest/application-structure-34b22b57e915',
		'https://documentation.fontoxml.com/latest/configure-elements-3ac02ec0c6c2',
		'https://documentation.fontoxml.com/latest/family-71e1eb7b5cab',
	]);

	const importStatements = [];

	if (useTypeScript) {
		const configureSxModuleImport = buildSxModuleTypeImport();
		importStatements.push(configureSxModuleImport);
	}

	importStatements.push(buildConfigureAsRemovedImport());

	if (!version.isPre7_17_0) {
		importStatements.push(buildXqImport());
	}

	const isMathMLPackage = elements.every(
		(el) => el.namespaceUri === 'http://www.w3.org/1998/Math/MathML'
	);

	if (isMathMLPackage) {
		if (!addons.includes('fontoxml-mathml')) {
			addCommentToAstNode(
				importStatements[importStatements.length - 1],
				[
					'TODO ðŸ‘‰: Configure the MathML addon.',
					'For more information:',
					'https://documentation.fontoxml.com/latest/add-ons-03165378ea7b',
				],
				true,
				true
			);
		}

		addCommentToAstNode(
			elementConfigurations[0],
			[
				'TODO ðŸ‘‰: Configure the MathML container elements.',
				'For more information:',
				'https://documentation.fontoxml.com/latest/fontoxml-mathml-215855ecb95b',
			],
			true,
			true
		);
	}

	const configureSxModuleJsAst = t.program([
		...importStatements,
		defaultExportConfigureSxModuleStatement,
	]);

	return configureSxModuleJsAst;
}

/**
 * Creates an install.ts/js file for a schema experience package.
 *
 * @param {boolean} useTypeScript Output TypeScript instead of JavaScript.
 *
 * @return {Promise<AstNode>}
 */
export async function generateInstallJS(useTypeScript) {
	const defaultExportInstallStatement = useTypeScript
		? buildDefaultExportInstallTS()
		: buildDefaultExportInstall();

	addCommentToAstNode(defaultExportInstallStatement, [
		'install is meant for registering custom functionality, such as custom operation steps and UI',
		'components. Any set-up for the package involving managers, such as setting up notifier callbacks,',
		'should also be done inside this function.',
		'For more information:',
		'https://documentation.fontoxml.com/latest/application-structure-34b22b57e915',
		'https://documentation.fontoxml.com/latest/create-a-modal-0ada3f0660ff',
		'https://documentation.fontoxml.com/latest/create-a-popover-fcd4f52edfbc',
		'https://documentation.fontoxml.com/latest/create-a-sidebar-f95a8dcab193',
		'https://documentation.fontoxml.com/latest/addaction-a144e8747d9a',
		'https://documentation.fontoxml.com/latest/addtransform-74a6b799a5ee',
	]);

	// Add comment inside the body of the install function.
	addCommentToAstNode(
		defaultExportInstallStatement.declaration.body,
		'Your custom configuration code goes here.',
	);

	const installJsAst = t.program([defaultExportInstallStatement]);

	return installJsAst;
}

/**
 * Creates the schema experience package.
 *
 * @param {string}   outputPath              The path of the Fonto Editor, or the schema source directory.
 * @param {Object}   schemaExperiencePackage The schema experience model for the package to create.
 * @param {Object}   prefixByNamespaceUri    The namespace URIs with their prefix.
 * @param {string[]} addons                  The addons to include in the manifest file.
 * @param {string}   version                 The sdk version used to configure.
 * @param {boolean}  useTypeScript           Output TypeScript instead of JavaScript.
 *
 * @return {Promise}
 */
async function createSchemaExperiencePackage(
	outputPath,
	schemaExperiencePackage,
	prefixByNamespaceUri,
	addons,
	version,
	useTypeScript
) {
	// Create the sx package directory.
	const sxPackageName = schemaExperiencePackage.sxPackageName;
	const sxPackagePath = await createPackageDirectoryPath(
		outputPath,
		sxPackageName
	);
	await fs.mkdir(sxPackagePath);

	// Add the sx package as a reference to the manifest files of all schema package that should
	// depend on this schema experience package.
	for (const schemaPackageName of schemaExperiencePackage.schemaPackageNames) {
		const schemaPackagePath = await createPackageDirectoryPath(
			outputPath,
			schemaPackageName
		);
		const schemaPackageManifestFilePath = path.join(
			schemaPackagePath,
			'fonto-manifest.json'
		);
		await addPackageToManifestFile(
			schemaPackageManifestFilePath,
			sxPackageName
		);
	}

	// Generate code files for the schema experience package.
	const configureSxModuleJsAst = await generateConfigureSxModuleJS(
		schemaExperiencePackage.elements,
		prefixByNamespaceUri,
		addons,
		version,
		useTypeScript
	);
	// Generate the AST for the schema experience configureSxModule.ts/js file.
	const configureSxModuleJsFilePath = path.join(
		sxPackagePath,
		'src',
		`configureSxModule${useTypeScript ? '.ts' : '.js'}`,
	);
	await writeAstProgramToFile(
		configureSxModuleJsFilePath,
		configureSxModuleJsAst,
	);

	const installJsAst = await generateInstallJS(useTypeScript);
	const installJsFilePath = path.join(
		sxPackagePath,
		'src',
		`install${useTypeScript ? '.ts' : '.js'}`,
	);
	await writeAstProgramToFile(installJsFilePath, installJsAst);
}

/**
 * Creates the schema experience pivot model translation package.
 *
 * @param {boolean} useTypeScript Output TypeScript instead of JavaScript.
 *
 * @return {Promise<AstNode>}
 */
export async function generateSchemaExperiencePivotModelTranslationConfigureSxModule(
	useTypeScript,
) {
	// Create the configureSxModule.js file.
	const markAsAddonStatement = buildMarkAsAddon();
	addCommentToAstNode(markAsAddonStatement, [
		'By marking this SX module as an add-on, it automatically applies to all schema experiences.',
	]);

	const registerTransformersStatement = buildRegisterTransformers();
	const exampleCode = await createPrettifiedCode(registerTransformersStatement);

	addCommentToAstNode(
		markAsAddonStatement,
		[
			'This is the configuration for transforming clipboard data, e.g. from MS Word or your browser,',
			'into XML matching your schema.',
			'For more information:',
			'https://documentation.fontoxml.com/latest/configure-clipboard-behavior-bc607964d3f5',
			'https://documentation.fontoxml.com/latest/pivotmodeltransformermanager-cc5c46bd05c3',
			'',
			'TODO ðŸ‘‰: Configure the transformers for pasting content from external sources into Fonto.',
			'Example:',
			...exampleCode.split(os.EOL).filter(Boolean),
		],
		true,
		true
	);

	const configureSxModuleJsAst = t.program(
		[
			useTypeScript ? buildSxModuleTypeImport() : null,
			buildPivotModelTransformerManagerImport(),
			useTypeScript
				? buildDefaultExportConfigureSxModuleTS({
						SX_CONFIGURATION: markAsAddonStatement,
				  })
				: buildDefaultExportConfigureSxModule({
						SX_CONFIGURATION: markAsAddonStatement,
				  }),
		].filter(Boolean)
	);

	return configureSxModuleJsAst;
}

/**
 * Create all schema experience packages.
 *
 * @param {string}   outputPath                     The path of the Fonto Editor, or the schema source directory.
 * @param {Object}   schemaPackagesByXsdPath        The package information by xsd path.
 * @param {Object}   compiledSchemaResultsByXsdPath The compiled schema for a package by xsd path.
 * @param {Object}   prefixByNamespaceUri           The namespace URIs with their prefix.
 * @param {string[]} addons                         The addons to include in the manifest file.
 * @param {string}   version                        The SDK version used to configure.
 * @param {boolean}  useTypeScript                  Output TypeScript instead of JavaScript.
 *
 * @return {Promise}
 */
export default async function createSchemaExperiencePackages(
	outputPath,
	schemaPackagesByXsdPath,
	compiledSchemaResultsByXsdPath,
	prefixByNamespaceUri,
	addons,
	version,
	useTypeScript
) {
	const configureSxModuleJsAst =
		await generateSchemaExperiencePivotModelTranslationConfigureSxModule(
			useTypeScript,
		);
	const pivotModelPackagePath = await createPackageDirectoryPath(
		outputPath,
		PIVOT_MODEL_TRANSLATION_PACKAGE_NAME,
	);
	await fs.mkdir(pivotModelPackagePath);
	const configureSxModuleJsFilePath = path.join(
		pivotModelPackagePath,
		'src',
		`configureSxModule${useTypeScript ? '.ts' : '.js'}`,
	);
	await writeAstProgramToFile(
		configureSxModuleJsFilePath,
		configureSxModuleJsAst,
	);

	const schemaExperiencePackages = buildSchemaExperienceConfigurationModel(
		schemaPackagesByXsdPath,
		compiledSchemaResultsByXsdPath,
		prefixByNamespaceUri
	);

	for (const schemaExperiencePackage of schemaExperiencePackages) {
		await createSchemaExperiencePackage(
			outputPath,
			schemaExperiencePackage,
			prefixByNamespaceUri,
			addons,
			version,
			useTypeScript
		);
	}

	return [
		...Object.values(schemaPackagesByXsdPath).map(
			(schemaPackage) => schemaPackage.packageName
		),
		PIVOT_MODEL_TRANSLATION_PACKAGE_NAME,
	];
}
