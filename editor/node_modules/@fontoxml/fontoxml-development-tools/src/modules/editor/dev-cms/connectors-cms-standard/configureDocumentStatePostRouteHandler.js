export default function configureDocumentStatePostRouteHandler(config) {
	return (req, res) => {
		Promise.all(
			req.body.documents.map(({ documentContext, documentId }) => {
				return new Promise((resolve) => {
					req.cms.getLatestRevisionId(
						documentId,
						req.body.context.editSessionToken,
						(error, revisionId) => {
							if (error) {
								resolve({
									status: 404,
								});
								return;
							}

							const documentLoadLock = {
								...config.documentLoadLock,
								...config.documentLoadLockOverrides[documentId],
							};

							let isLockAcquired;
							if (documentLoadLock.releaseLocksOnStateRequest) {
								isLockAcquired = false;
							} else {
								isLockAcquired = documentContext
									? documentLoadLock.isLockAvailable &&
									  documentContext.isLockAcquired
									: documentLoadLock.isLockAcquired;
							}

							resolve({
								status: 200,
								body: {
									revisionId,
									lock: {
										isLockAcquired,
										isLockAvailable: documentLoadLock.isLockAvailable,
										reason: !documentLoadLock.isLockAvailable
											? documentLoadLock.lockReason
											: undefined,
									},
								},
							});
						}
					);
				});
			})
		).then((results) => {
			res.status(200)
				.set('content-type', 'application/json; charset=utf-8')
				.json({ results });
		});
	};
}
