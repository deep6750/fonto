import { v4 as uuid } from 'uuid';

// Force deletion of correlation ids after one hour
/**
 * @const {number} Default number of milliseconds between the creation of a correlation id and expiration.
 */
const MAX_CORRELATION_ID_TTL_MS = 60 * 60 * 1000;

/**
 * Cleanup a list of correlation ids based on their expiration timestamp.
 *
 * @param {object} correlationIds  List of correlation ids to perform cleanup on.
 */
function cleanupCorrelationIds(correlationIds) {
	Object.keys(correlationIds).forEach((correlationId) => {
		const correlationIdData = correlationIds[correlationId];
		if (!correlationIdData || correlationIdData.expireAt < Date.now()) {
			delete correlationIds[correlationId];
		}
	});
}

class CorrelationIdRepository {
	/**
	 * @constructor
	 */
	constructor() {
		this._correlationIds = Object.create(null);
	}

	/**
	 * Create a new correlationId which validates for all requests with an existing and non expired correlation id.
	 *
	 * @param {number} [ttlInMs=MAX_CORRELATION_ID_TTL_MS]  Time in milliseconds the correlation id is valid.
	 *
	 * @return {number} The generated correlation id.
	 */
	createNewWithAllRequestsAsValidValidator(
		editSessionToken,
		ttlInMs = MAX_CORRELATION_ID_TTL_MS
	) {
		return this.createNewWithRequestValidator(
			() => true,
			editSessionToken,
			ttlInMs
		);
	}

	/**
	 * Create a new correlationId using a custom requestValidator function.
	 *
	 * @param {function(req): Promise<boolean>|boolean} requestValidator  A function which validates the request.
	 * @param {number} [ttlInMs=MAX_CORRELATION_ID_TTL_MS]  Time in milliseconds the correlation id is valid.
	 *
	 * @return {number} The generated correlation id.
	 */
	createNewWithRequestValidator(
		requestValidator,
		editSessionToken,
		ttlInMs = MAX_CORRELATION_ID_TTL_MS
	) {
		const correlationId = uuid();
		const correlationIdData = {
			editSessionToken,
			requestValidator,
			expireAt: Date.now() + ttlInMs,
		};

		this._correlationIds[correlationId] = correlationIdData;

		return correlationId;
	}

	/**
	 * All correlationIds should be deleted when they are not considered valid anymore. You should not depend on the ttl.
	 *
	 * @param {number} correlationId  The correlationId to delete.
	 */
	delete(correlationId) {
		delete this._correlationIds[correlationId];
		cleanupCorrelationIds(this._correlationIds);
	}

	/**
	 * Check if request can be validated based on the Fonto-Correlation-Id header. This method is available to provide
	 * minimal overhead for requests that don't have the header set.
	 *
	 * @param {express.Request} req  The express request object.
	 *
	 * @return {boolean}
	 */
	canValidateRequest(req) {
		const correlationId = req.get('Fonto-Correlation-Id');
		return !!correlationId;
	}

	/**
	 * Validate a request based on the Fonto-Correlation-Id header and the request validator set for the correlation id.
	 *
	 * @param {express.Request} req  The express request object.
	 *
	 * @return {Promise<boolean>} A promise returning a boolean indicating if the request is valid based on the header.
	 */
	validateRequest(req) {
		// Cleanup correlation ids to make sure expired correlation ids' are no longer valid.
		cleanupCorrelationIds(this._correlationIds);
		const correlationId = req.get('Fonto-Correlation-Id');
		const correlationIdData = this._correlationIds[correlationId];
		if (
			!correlationId ||
			!correlationIdData ||
			!correlationIdData.requestValidator
		) {
			return Promise.resolve(false);
		}

		return Promise.resolve(correlationIdData.requestValidator(req)).then(
			(passed) => {
				return passed;
			}
		);
	}

	getEditSessionTokenForRequest(req) {
		const correlationId = req.get('Fonto-Correlation-Id');
		const correlationIdData = this._correlationIds[correlationId];
		if (!correlationIdData) {
			// In dev mode, valid correlation ids are not required. We may return null here; in dist
			// mode we would have been rejected earlier due to authentication.
			return null;
		}
		return correlationIdData.editSessionToken;
	}
}

export default new CorrelationIdRepository();
