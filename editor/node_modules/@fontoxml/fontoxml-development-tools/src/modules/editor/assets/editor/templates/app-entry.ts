(async function init() {
	try {
		window.startFontoBootstrap();

		await import('fontoxml-shims/src/main');

		const glamor = await import('glamor');
		glamor.styleSheet.maxLength = 4;
		glamor.plugins.remove(
			glamor.plugins.fns.find(function (pluginFn) {
				return pluginFn.name === 'prefixes';
			})
		);

		const getQueryParameterByName = (
			await import('fontoxml-utils/src/getQueryParameterByName')
		).default;
		const scope = getQueryParameterByName(window.location.search, 'scope');
		const configurationManager = (
			await import('fontoxml-configuration/src/configurationManager')
		).default;
		configurationManager.set('scope', scope ? JSON.parse(scope) : {});
		configurationManager.set(
			'version-info',
			(await import('./generated?type=versionInfo')).default
		);
		configurationManager.set(
			'fonto-debug-build',
			(await import('./generated?type=debugBuild')).default
		);

		await import('./generated?type=styles');

		await import('./generated?type=setDefaultConfiguration');

		await import('config/configuration');

		await configurationManager.applyDefaults();

		await import('./generated?type=messages');

		await import('./generated?type=configureSxModule');

		(await import('fontoxpath')).finalizeModuleRegistration?.();

		await import('config/schemaExperienceResolver');

		await import('./generated?type=install');

		await import('react');
		const ReactDOM = (await import('react-dom')).default;
		const renderApp = (await import('fontoxml-editor/src/renderApp'))
			.default;

		const container = window.document.getElementById('index-app-root');
		function shouldForceReactLegacyMode() {
			try {
				return configurationManager.get(
					'enable-experiment/react-legacy-mode'
				);
			} catch (_) {
				// Configuration value does not exist, use whatever is available
				return false;
			}
		}
		if (
			typeof ReactDOM.createRoot === 'function' &&
			!shouldForceReactLegacyMode()
		) {
			const root = ReactDOM.createRoot(container);
			root.render(renderApp());
		} else {
			ReactDOM.render(renderApp(), container);
		}

		window.completeFontoBootstrap();
	} catch (error) {
		if (window.showFontoError) {
			window.showFontoError(error);
		} else {
			throw error;
		}
	}
})();
