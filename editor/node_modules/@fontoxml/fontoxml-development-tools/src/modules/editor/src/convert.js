/**
 * Converts input in camel case (suchAsThis, orLikeThis) to snake case (such-as-this, or_like_this).
 *
 * @param  {string}  input
 * @param  {string}  [separator]  The snake case separator (defaults to - (a dash)).
 *
 * @return  {string}
 */
export function fromCamelCaseToSnakeCase(input, separator) {
	separator = separator || '-';

	// Matches upper cased letters.
	return input.replace(
		/[A-Z]/g,
		// Replaces matching letters with the given separator followed by the lower cased matching letter.
		(matchingLetter, positionOfMatchingLetter) =>
			(positionOfMatchingLetter > 0 ? separator : '') +
			matchingLetter.toLowerCase()
	);
}

/**
 * Converts input in snake case (such-as-this, or_like_this) to camel case (suchAsThis, orLikeThis).
 *
 * @param   {string}  input
 * @param   {string}  [separator]  The snake case separator (defaults to - (a dash)).
 *
 * @return  {string}
 */
export function fromSnakeCaseToCamelCase(input, separator) {
	separator = separator || '-';

	// Matches segments starting with the given separator, followed by 1 character.
	return input.toLowerCase().replace(
		new RegExp(`${separator}(.)`, 'g'),
		// Replaces matches from the regExp with the upper cased character after the separator.
		(_matchingSegment, firstCaptureGroup) => firstCaptureGroup.toUpperCase()
	);
}

/**
 * Converts the first letter of input to uppercase and returns input.
 *
 * @param   {string} input
 *
 * @return  {string}
 */
export function uppercaseFirstLetter(input) {
	if (input === '') {
		return input;
	}

	const firstCharacter = String.fromCodePoint(input.codePointAt(0));
	return firstCharacter.toUpperCase() + input.substr(firstCharacter.length);
}
