import path from 'path';

import normalisePath from '../../src/helpers/normalisePath.js';

export default function getNamesAndPaths(appConfig, options) {
	const contextFolder = normalisePath(
		path.resolve(appConfig.root) + path.posix.sep
	);
	const editorModuleFolder = normalisePath(
		path.resolve(options.editorModulePath) + path.posix.sep
	);
	const bootstrapFolder = normalisePath(
		path.posix.join(options.editorModulePath, 'assets', 'editor') +
			path.posix.sep
	);
	const loadersFolder = normalisePath(
		path.posix.join(options.editorModulePath, 'src', 'webpackLoaders') +
			path.posix.sep
	);

	const names = {
		configFolder: 'config',
		configurationFile: 'configuration',
		entryFile: 'app-entry.ts',
		fontoManifestFile: 'fonto-manifest.json',
		htmlTemplateFile: 'index.template.html',
		outputCssFile: 'main.css',
		outputFolder: options.outputFolder || 'dist',
		outputJsFile: 'main.js',
		packagesFolder: 'packages',
		packagesSharedFolder: 'packages-shared',
		platformFolder: 'platform',
		platformLinkedFolder: 'platform-linked',
		schemaExperienceResolverFile: 'schemaExperienceResolver',
		templatesFolder: 'templates',
		vendorsFolder: 'fontoxml-vendors',
	};

	const paths = {
		appConfigManifestFile: path.posix.join(
			contextFolder,
			names.configFolder,
			names.fontoManifestFile
		),
		appConfigurationFile: path.posix.join(
			contextFolder,
			names.configFolder,
			names.configurationFile
		),
		appSchemaExperienceResolverFile: path.posix.join(
			contextFolder,
			names.configFolder,
			names.schemaExperienceResolverFile
		),
		bootstrapFolder,
		configFolder: path.posix.join(
			contextFolder,
			names.configFolder,
			path.posix.sep
		),
		contextFolder,
		editorModuleFolder,
		entryFile: path.posix.join(
			bootstrapFolder,
			names.templatesFolder,
			names.entryFile
		),
		generatedLoader: path.posix.join(loadersFolder, 'generatedLoader.cjs'),
		htmlTemplateFile: path.posix.join(
			bootstrapFolder,
			names.templatesFolder,
			names.htmlTemplateFile
		),
		outputFolder: path.posix.join(
			contextFolder,
			names.outputFolder,
			path.posix.sep
		),
		packagesFolder:
			options.unitTest && options.unitTest.packagesPath
				? normalisePath(options.unitTest.packagesPath + path.posix.sep)
				: path.posix.join(
						contextFolder,
						names.packagesFolder,
						path.posix.sep
				  ),
		packagesSharedFolder:
			options.unitTest && options.unitTest.packagesSharedPath
				? normalisePath(
						options.unitTest.packagesSharedPath + path.posix.sep
				  )
				: path.posix.join(
						contextFolder,
						names.packagesSharedFolder,
						path.posix.sep
				  ),
		platformFolder:
			options.unitTest && options.unitTest.platformPath
				? normalisePath(options.unitTest.platformPath + path.posix.sep)
				: path.posix.join(
						contextFolder,
						names.platformFolder,
						path.posix.sep
				  ),
		platformLinkedFolder:
			options.unitTest && options.unitTest.platformLinkedPath
				? normalisePath(
						options.unitTest.platformLinkedPath + path.posix.sep
				  )
				: path.posix.join(
						contextFolder,
						names.platformLinkedFolder,
						path.posix.sep
				  ),
		platformSourceMapLoader: path.posix.join(
			loadersFolder,
			'platformSourceMapLoader.cjs',
		),
		symbolLoader: path.posix.join(loadersFolder, 'symbolLoader.cjs'),
		templatesFolder: path.posix.join(
			bootstrapFolder,
			names.templatesFolder,
			path.posix.sep
		),
		vendorsSourceMapLoader: path.posix.join(
			loadersFolder,
			'vendorsSourceMapLoader.cjs',
		),
	};
	paths.generatedFile = path.posix.join(paths.templatesFolder, 'generated');
	paths.packageRootFolders = [
		paths.packagesFolder,
		paths.packagesSharedFolder,
		paths.platformLinkedFolder,
		paths.platformFolder,
	];
	paths.platformLinkedVendorsFolder = path.posix.join(
		paths.platformLinkedFolder,
		names.vendorsFolder,
		path.posix.sep
	);
	paths.platformSourceMapFile = path.posix.join(
		paths.platformFolder,
		'sourcemaps.js.map'
	);
	paths.platformVendorsFolder = path.posix.join(
		paths.platformFolder,
		names.vendorsFolder,
		path.posix.sep
	);
	paths.testAssetsFolder = path.posix.join(
		paths.contextFolder,
		'test',
		'assets',
		path.posix.sep
	);

	return {
		names,
		paths,
	};
}
