const fs = require('fs-extra');
const path = require('path');
const loaderUtils = require('loader-utils');

// From source-map-loader.
// Matches only the last occurrence of sourceMappingURL
const baseRegex =
	'\\s*[@#]\\s*sourceMappingURL\\s*=\\s*([^\\s]*)(?![\\S\\s]*sourceMappingURL)';
// Matches /* ... */ comments
const regex1 = new RegExp(`/\\*${baseRegex}\\s*\\*/`);
// Matches // .... comments
const regex2 = new RegExp(`//${baseRegex}($|\n|\r\n?)`);
// Matches DataUrls
const regexDataUrl =
	/data:[^;\n]+(?:;charset=[^;\n]+)?;base64,([a-zA-Z0-9+/]+={0,2})/;

function resolveSourceMapUrl(loaderContext, url) {
	return new Promise((resolve, reject) => {
		loaderContext.resolve(
			loaderContext.context,
			loaderUtils.urlToRequest(url, true),
			async (error, result) => {
				if (error) {
					reject(error);
					return;
				}

				resolve(result);
			}
		);
	});
}

module.exports = async function (input) {
	this.cacheable(true);

	const callback = this.async();

	function untouched() {
		return callback(null, input, undefined);
	}

	const match = input.match(regex1) || input.match(regex2);

	if (!match) {
		return untouched();
	}

	const url = match[1];
	const dataUrlMatch = regexDataUrl.exec(url);
	let sourceMap;
	if (dataUrlMatch) {
		// Get the source map from the inline base64 encoded string.
		const mapString = Buffer.from(dataUrlMatch[1], 'base64').toString();
		try {
			sourceMap = JSON.parse(mapString);
		} catch (_error) {
			return untouched();
		}
	} else {
		// Get the source map from file as specified by the url.
		let mapPath;
		try {
			mapPath = await resolveSourceMapUrl(this, url);
		} catch (_error) {
			return untouched();
		}

		this.addDependency(mapPath);
		sourceMap = await fs.readJson(mapPath, 'utf-8');
	}

	// We do not support source maps without sources content.
	if (
		!sourceMap.sourcesContent ||
		sourceMap.sourcesContent.length < sourceMap.sources.length
	) {
		return untouched();
	}

	// Rewrite the source paths to absolute paths under the vendors directory path.
	const libraryPath = path.resolve(this.resourcePath.split('.')[0]);
	sourceMap.sources = sourceMap.sources.map((source) =>
		path.join(libraryPath, path.normalize(source.replace(/^(..\/)+/, '')))
	);

	return callback(null, input, sourceMap);
};
