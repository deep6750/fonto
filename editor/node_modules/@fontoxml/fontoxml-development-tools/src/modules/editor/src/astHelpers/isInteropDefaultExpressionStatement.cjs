function isInteropDefaultExpressionStatement(path) {
	// If path is an ExpressionStatement, get the expression.
	//
	//              s1 = s1.default || s1
	// path         ^^^^^^^^^^^^^^^^^^^^^ (ExpressionStatement)
	//  .expression ^^^^^^^^^^^^^^^^^^^^^ (AssignmentExpression)
	if (path.isExpressionStatement()) {
		path = path.get('expression');
	}

	// Check if the path is an AssignmentExpression.
	//
	// Correct:
	//      s1 = s1.default || s1
	// path ^^^^^^^^^^^^^^^^^^^^^ (AssignmentExpression)
	//
	// Incorrect:
	//      s1.doSomething();
	// path ^^^^^^^^^^^^^^^^^ (CallExpression)
	if (!path.isAssignmentExpression()) {
		return;
	}

	// Check if the left and right hand side of the AssignmentExpression are an Identifier and
	// an Or LogicalExpression respectively.
	//
	// Correct:
	//       s1 = s1.default || s1
	// path  ^^^^^^^^^^^^^^^^^^^^^           (AssignmentExpression)
	// left  ^^                              (Identifier)
	// right      ^^^^^^^^^^^^^^^^           (LogicalExpression, Or)
	//
	// Incorrect:
	//       foo.something = s1.default && s1
	// left  ^^^^^^^^^^^^^                    (MemberExpression)
	// right                 ^^^^^^^^^^^^^^^^ (LogicalExpression, And)
	const left = path.get('left');
	const right = path.get('right');
	if (
		!left.isIdentifier() ||
		!right.isLogicalExpression({ operator: '||' })
	) {
		return false;
	}

	// Check if the right side of the Or LogicalExpression is an Identifier.
	//
	// Correct:
	//         s1 = s1.default || s1
	// path    ^^^^^^^^^^^^^^^^^^^^^            (AssignmentExpression)
	// right        ^^^^^^^^^^^^^^^^            (LogicalExpression, Or)
	//  .right                    ^^            (Identifier)
	//
	// Incorrect:
	//         s1 = s1.default || foo.something
	// right        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ (LogicalExpression, Or)
	//  .right                    ^^^^^^^^^^^^^ (MemberExpression)
	const rightAfterOr = right.get('right');
	if (!rightAfterOr.isIdentifier()) {
		return false;
	}

	// Check if the left side or the Or LogicalExpression is a MemberExpression.
	//
	// Correct:
	//        s1 = s1.default || s1
	// path   ^^^^^^^^^^^^^^^^^^^^^    (AssignmentExpression)
	// right       ^^^^^^^^^^^^^^^^    (LogicalExpression, Or)
	//  .left      ^^^^^^^^^^          (MemberExpression)
	//
	// Incorrect:
	//        s1 = s1 || foo.something
	// right       ^^^^^^^^^^^^^^^^^^^ (LogicalExpression, Or)
	//  .left      ^^                  (Identifier)
	const rightBeforeOr = right.get('left');
	if (!rightBeforeOr.isMemberExpression()) {
		return false;
	}

	// Check if the object of the MemberExpression (left side of the Or LogicalExpression) is an Identifier.
	//
	// Correct:
	//           s1 = s1.default || s1
	// path      ^^^^^^^^^^^^^^^^^^^^^           (AssignmentExpression)
	// right          ^^^^^^^^^^^^^^^^           (LogicalExpression, Or)
	//  .left         ^^^^^^^^^^                 (MemberExpression)
	//   .object      ^^                         (Identifier)
	//
	// Incorrect:
	//          s1 = foo.something.default || s1
	// right         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ (LogicalExpression, Or)
	//  .left        ^^^^^^^^^^^^^^^^^^^^^       (MemberExpression)
	//   .object     ^^^^^^^^^^^^^               (MemberExpression)
	const rightBeforeObject = rightBeforeOr.get('object');
	if (!rightBeforeObject.isIdentifier()) {
		return false;
	}

	// Check if the property of the MemberExpression (left side of the Or LogicalExpression) is an Identifier
	// with the name 'default', or a StringLiteral with value 'default'.
	//
	// Correct 1:
	//         s1 = s1.default || s1
	// path    ^^^^^^^^^^^^^^^^^^^^^      (AssignmentExpression)
	// right        ^^^^^^^^^^^^^^^^      (LogicalExpression, Or)
	//  .left       ^^^^^^^^^^            (MemberExpression)
	//   .prop         ^^^^^^^            (Identifier, with name 'default')
	//
	// Correct 2:
	//         s1 = s1['default'] || s1
	// path    ^^^^^^^^^^^^^^^^^^^^^^^^   (AssignmentExpression)
	// right        ^^^^^^^^^^^^^^^^^^^   (LogicalExpression, Or)
	//  .left       ^^^^^^^^^^^^^         (MemberExpression)
	//   .prop         ^^^^^^^^^          (StringLiteral, with value 'default')
	//
	// Incorrect 1:
	//         s1 = s1.something || s1
	// right        ^^^^^^^^^^^^^^^^^^    (LogicalExpression, Or)
	//  .left       ^^^^^^^^^^^^          (MemberExpression)
	//   .prop         ^^^^^^^^^          (Identifier, with name 'something')
	//
	// Incorrect 2:
	//         s1 = s1['something'] || s1
	// right        ^^^^^^^^^^^^^^^^^^^^^ (LogicalExpression, Or)
	//  .left       ^^^^^^^^^^^^^^^       (MemberExpression)
	//   .prop         ^^^^^^^^^^^        (StringLiteral, with value 'default')
	const rightBeforeProperty = rightBeforeOr.get('property');
	if (
		!rightBeforeProperty.isIdentifier({ name: 'default' }) &&
		!rightBeforeProperty.isStringLiteral({ value: 'default' })
	) {
		return false;
	}

	// Check if the left hand side of the AssignmentExpression, the left hand side of the Or LogicalExpression's
	// .object, and the right hand side of the Or LogicalExpression Identifier names are all the same.
	//
	// Correct:
	//           s1 = s1.default || s1
	// path      ^^^^^^^^^^^^^^^^^^^^^ (AssignmentExpression)
	// left      ^^                    (Identifier, with name 's1')
	// right          ^^^^^^^^^^^^^^^^ (LogicalExpression, Or)
	//  .left         ^^^^^^^^^^       (MemberExpression)
	//   .object      ^^               (Identifier, with name 's1')
	//  .right                      ^^ (Identifier, with name 's1')
	//
	// Incorrect:
	//           s1 = s2.default || s3
	// left      ^^                    (Identifier, with name 's1')
	// right          ^^^^^^^^^^^^^^^^ (LogicalExpression, Or)
	//  .left         ^^^^^^^^^^       (MemberExpression)
	//   .object      ^^               (Identifier, with name 's2')
	//  .right                      ^^ (Identifier, with name 's3')
	if (
		left.node.name !== rightBeforeObject.node.name ||
		left.node.name !== rightAfterOr.node.name
	) {
		return false;
	}

	return true;
}

module.exports = isInteropDefaultExpressionStatement;
