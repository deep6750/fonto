import fastGlob from 'fast-glob';
import pMap from 'p-map';

import mergeIndexPageAndManifest from '../../helpers/mergeIndexPageAndManifest.js';
import outputWarningsByFilename from '../../helpers/outputWarningsByFilename.js';
import prettifyJsFile from '../../helpers/prettifyJsFile.js';
import renameJsxFile from '../../helpers/renameJsxFile.js';
import transformJsFile from '../../helpers/transformJsFile.js';
import updateEditorPackageJson from '../../helpers/updateEditorPackageJson.js';
import validateJsFile from '../../helpers/validateJsFile.js';
import WarningsByFilename from '../../helpers/WarningsByFilename.js';
import writeJsFileToDisk from '../../helpers/writeJsFileToDisk.js';

export default async function convertEditorWithOutput(
	outputDir,
	doNotSaveWarnings,
	res
) {
	const destroySpinner = res.spinner(`Converting Fonto Editor codebase...`);

	const jsFilePaths = await fastGlob(
		[
			'config/**/*.js',
			'packages/*/src/**/*.js',
			'packages-shared/*/src/**/*.js',
			'!**/assets/**/*',
		],
		{
			absolute: true,
			cwd: outputDir,
		}
	);

	const warningsByFilename = new WarningsByFilename();

	await pMap(
		jsFilePaths,
		async (jsFilePath) => {
			try {
				const file = { filePath: jsFilePath, warningsByFilename };
				await transformJsFile(file);
				await prettifyJsFile(file, false);
				await renameJsxFile(file);
				await writeJsFileToDisk(file);
				await validateJsFile(file);
			} catch (error) {
				if (!error.message || !error.message.startsWith(jsFilePath)) {
					error.message = `${jsFilePath}: Error while converting file. ${error.message}`;
				}
				warningsByFilename.add(jsFilePath, error);
			}
		},
		{ concurrency: 8 }
	);

	await mergeIndexPageAndManifest(outputDir, warningsByFilename);

	await updateEditorPackageJson(outputDir, warningsByFilename);

	destroySpinner();

	if (warningsByFilename.size) {
		res.caption('Warnings:');
		await outputWarningsByFilename(
			warningsByFilename,
			doNotSaveWarnings ? null : outputDir
		);
		res.break();
	}
}
