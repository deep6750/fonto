const { extname } = require('path');

const moveComments = require('../astHelpers/moveComments.cjs');

module.exports = (babel, options, _cwd) => {
	const { types: t } = babel;

	return {
		visitor: {
			StringLiteral(path) {
				// Guard against string literals that aren't in an import declaration.
				//
				// Correct:
				//            import somePackageImport from 'some-package/somePackageImport';
				// path                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  (StringLiteral)
				//  .stParent ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  (ImportDeclaration)
				//
				// Incorrect:
				//            var test = 'test';
				// path                  ^^^^^^                                               (StringLiteral)
				//  .stParent ^^^^^^^^^^^^^^^^^^                                              (VariableDeclaration)
				if (!t.isImportDeclaration(path.getStatementParent())) {
					return;
				}

				// Get the parts.
				//
				//         import somePackageImport from 'some-package/somePackageImport.js';
				// path                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  (StringLiteral)
				// source                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
				// extname                                                              ^^^
				const source = path.node.value;
				const extension = extname(source);

				// Check if the source matches all the rules.
				//
				// Incorrect (one of):
				// import whynot from 'whynot';
				// import baseUtils from 'fontoxml-base-utils';
				// import importWithExtension from './importWithExtension.js';
				// import importWithoutSlash from 'some-package';
				// import someTextFileWithoutExtension from 'text!./someTextFile';
				// import someJsonFileWithoutExtension from 'json!./someJsonFile';
				//
				// TODO: Maybe rewrite the text!. and json!. to a generic '<loader>:.' check.
				if (
					options.importAliases
						.map((alias) => alias.alias)
						.includes(source) ||
					options.mainJsModuleNames.includes(source) ||
					extension ||
					!source.includes('/') ||
					source.startsWith('text!') ||
					source.startsWith('json!')
				) {
					return;
				}

				// Replace the old StringLiteral with a new StringLiteral with '.js' appended to it.
				//
				// Input:
				//      import somePackageImport from 'some-package/somePackageImport';
				// path                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     (StringLiteral)
				//
				// Output:
				//      import somePackageImport from 'some-package/somePackageImport.js';
				// path                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  (StringLiteral)
				const sourceNode = t.stringLiteral(`${source}.js`);
				moveComments.asIs(babel, sourceNode, path.node);
				path.replaceWith(sourceNode);
			},
		},
	};
};
