const getDescendantNodes = require('../astHelpers/getDescendantNodes.cjs');
const isInteropDefaultExpressionStatement = require('../astHelpers/isInteropDefaultExpressionStatement.cjs');
const addWarningsForRemovedComments = require('../astHelpers/addWarningsForRemovedComments.cjs');
const moveComments = require('../astHelpers/moveComments.cjs');

module.exports = (babel, options, _cwd) => {
	const { types: t } = babel;

	return {
		visitor: {
			AssignmentExpression(path) {
				// Check if the AssignmentExpression is an interop default expression.
				if (!isInteropDefaultExpressionStatement(path)) {
					return;
				}

				// If the expression is the only argument to a return statement, return the identifier.
				//
				// Correct:
				//          return s1 = s1.default || s1;
				// path            ^^^^^^^^^^^^^^^^^^^^^                    (AssignmentExpression)
				//  .parent ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                   (ReturnStatement)
				//
				// Incorrect:
				//          return s1 = s1.default || s1, somethingElse(s1);
				// path            ^^^^^^^^^^^^^^^^^^^^^                    (AssignmentExpression)
				//  .parent        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     (SequenceExpression)
				if (t.isReturnStatement(path.parent)) {
					// Replace the AssignmentExpression with the AssignmentExpression's left side.
					//
					// Input:
					//      return s1 = s1.default || s1;
					// path        ^^^^^^^^^^^^^^^^^^^^^  (AssignmentExpression)
					//
					// Output:
					//      return s1;
					// path        ^^                     (Identifier)
					const leftIdentifier = path.get('left').node;
					moveComments.asTrailing(
						babel,
						leftIdentifier,
						path.node,
						...getDescendantNodes(path.get('right'))
					);
					path.replaceWith(leftIdentifier);
					return;
				}

				// Remove the AssignmentExpression.
				//
				// Input:
				//      return s1 = s1.default || s1, somethingElse(s1);
				// path        ^^^^^^^^^^^^^^^^^^^^^                     (AssignmentExpression)
				//
				// Output:
				//      return   somethingElse(s1);
				// path        ^                                         (None)
				// TODO: Move comments
				addWarningsForRemovedComments(
					options.warningsByFilename,
					this.file.opts.filename,
					path
				);
				path.remove();
			},

			ExpressionStatement(path) {
				// Check if the AssignmentExpression is an interop default expression.
				if (!isInteropDefaultExpressionStatement(path)) {
					return;
				}

				// Remove the ExpressionStatement.
				//
				// Input:
				//      s1 = s1.default || s1
				// path ^^^^^^^^^^^^^^^^^^^^^ (ExpressionStatement)
				//
				// Output:
				//
				// path ^                     (None)
				// TODO: Move comments
				addWarningsForRemovedComments(
					options.warningsByFilename,
					this.file.opts.filename,
					path
				);
				path.remove();
			},
		},
	};
};
