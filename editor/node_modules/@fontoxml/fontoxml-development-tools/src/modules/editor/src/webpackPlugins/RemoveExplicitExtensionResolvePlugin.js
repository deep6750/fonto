/** @typedef {import('enhanced-resolve').Resolver} Resolver */

import getPaths from 'enhanced-resolve/lib/getPaths.js';
import path from 'path';

/**
 * This plugin ensures that import paths with an extension are always resolved
 * as if they were extensionless.
 */
export default class RemoveExplicitExtensionResolvePlugin {
	constructor(options = {}) {
		this.options = options;
	}

	/**
	 * @param {Resolver} resolver
	 */
	apply(resolver) {
		const target = resolver.ensureHook('resolve');
		resolver
			.getHook('resolve')
			.tapAsync(
				RemoveExplicitExtensionResolvePlugin.name,
				(request, resolveContext, callback) => {
					const parsed = resolver.parse(request.request);
					const basename = getPaths.basename(parsed.request);
					if (!basename) {
						return callback();
					}

					// If there is no extension, or the extension is not in the
					// list of extensions, do not try to resolve with different
					// extensions.
					const extension = path.extname(basename);
					const extensions = this.options.extensions || [];
					if (!extension || !extensions.includes(extension)) {
						return callback();
					}

					// Rewrite request to not include the extension.
					const fileNameWithoutExtension = path.basename(
						basename,
						extension
					);
					const dirPath = path.dirname(request.request);
					if (!request.request.startsWith(dirPath)) {
						return callback(
							new Error(
								`Failed to remove explicit extension for "${request.request}" to "${fileNameWithoutExtension}".`
							)
						);
					}
					const obj = {
						...request,
						request: `${dirPath}/${fileNameWithoutExtension}${parsed.query}${parsed.fragment}`,
					};
					return resolver.doResolve(
						target,
						obj,
						`removing extension ${extension}`,
						resolveContext,
						(err, result) => {
							if (err) {
								return callback(err);
							}

							if (result) {
								return callback(null, result);
							}

							// Don't allow other aliasing or raw request.
							return callback(null, null);
						}
					);
				}
			);
	}
}
