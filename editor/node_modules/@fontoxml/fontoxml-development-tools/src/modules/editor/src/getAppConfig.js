import deepmerge from 'deepmerge';
import fs from 'fs-extra';
import path from 'path';
import { pathToFileURL } from 'url';

const DEFAULT_DEV_CMS_CONFIG = {
	alwaysRegenerateSessionToken: false,
	bodyParserLimit: '5mb',
	cacheControlDisabled: false,
	cacheControlMaxAge: 300,
	delay: 0,
	dist: false,
	distAuth: false,
	documentLoadLock: {
		isLockAcquired: true,
		isLockAvailable: true,
		lockReason:
			'The development server is configured to make this document unavailable for locking.',
		releaseLocksOnStateRequest: false,
	},
	documentLoadLockOverrides: {},
	documentLoadBatchResultsLimit: null,
	documentSaveBatchResultsLimit: null,
	memoryStoreTtl: 3600,
	port: 8080,
	saveMode: 'disk',
	verbose: false,
};

function parseSaveMode(saveMode) {
	switch (saveMode) {
		case 'session':
		case 'session-memory':
		case 'memory':
			return 'session-memory';
		case 'shared-memory':
			return 'shared-memory';
		case 'off':
		case 'none':
		case 'false':
			return 'off';
		default:
			return 'disk';
	}
}

export default async function getAppConfig(contextPath, options) {
	contextPath = path.resolve(contextPath);

	const appConfigJsFilePath = path.join(contextPath, 'config.js');
	const appConfigJsonFilePath = path.join(contextPath, 'config.json');

	let config = null;
	if (fs.existsSync(appConfigJsFilePath)) {
		config = deepmerge(
			DEFAULT_DEV_CMS_CONFIG,
			(await import(pathToFileURL(appConfigJsFilePath))).default()
		);
	} else if (fs.existsSync(appConfigJsonFilePath)) {
		config = deepmerge(
			DEFAULT_DEV_CMS_CONFIG,
			JSON.parse(fs.readFileSync(appConfigJsonFilePath))
		);
	} else {
		config = deepmerge(DEFAULT_DEV_CMS_CONFIG, {});
	}

	config.root = contextPath;

	config.bodyParserLimit =
		options['body-parser-limit'] || config.bodyParserLimit;
	config.cacheControlDisabled =
		options['cache-control-disabled'] || config.cacheControlDisabled;
	config.cacheControlMaxAge =
		(options['cache-control-max-age'] || config.cacheControlMaxAge) * 1000;
	config.delay = options.delay || config.delay;
	config.dist = options.dist || config.dist;
	config.distAuth =
		options['dist-auth'] === undefined
			? config.distAuth
			: options['dist-auth'];
	config.documentLoadLock = Object.assign(config.documentLoadLock, {
		releaseLocksOnStateRequest: options['release-locks-on-state-request']
			? options['release-locks-on-state-request']
			: config.documentLoadLock.releaseLocksOnStateRequest,
		isLockAcquired: options['lock-not-acquired']
			? !options['lock-not-acquired']
			: config.documentLoadLock.isLockAcquired,
		isLockAvailable: options['lock-not-available']
			? !options['lock-not-available']
			: config.documentLoadLock.isLockAvailable,
	});
	config.memoryStoreTtl =
		(options['memory-store-ttl'] || config.memoryStoreTtl) * 1000;
	config.port = options.port || config.port;
	config.saveMode = parseSaveMode(options.savemode || config.saveMode);
	if (config.saveMode === 'off') {
		config.saveMode = 'session-memory';
		config.alwaysRegenerateSessionToken = true;
	}
	config.verbose = options.verbose || config.verbose;
	config.writeToDisk = options['write-to-disk'] || config.writeToDisk;

	return config;
}
