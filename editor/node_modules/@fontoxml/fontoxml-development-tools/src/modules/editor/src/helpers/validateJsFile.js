import babel from '@babel/core';
import path from 'path';
import { fileURLToPath } from 'url';

import { defaultBabelValidationPlugins } from '../config.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const pluginPath = path.resolve(__dirname, '..', 'babelPlugins');

/**
 * Validate a single JS file against a list of plugins.
 *
 * @param {Object}   file
 * @param {string[]} [plugins]   The babel plugins to use.
 *
 * @return {Promise}
 */
export default async function validateJsFile(
	file,
	plugins = defaultBabelValidationPlugins
) {
	await babel.transformAsync(file.code, {
		babelrc: false,
		configFile: false,
		cwd: __dirname,
		filename: file.filePath,
		plugins: [
			'@babel/plugin-syntax-jsx',
			'@babel/plugin-syntax-class-properties',
			'@babel/plugin-syntax-object-rest-spread',

			...plugins.map((pluginName) => [
				path.join(pluginPath, `${pluginName}.cjs`),
				{
					warningsByFilename: file.warningsByFilename,
				},
			]),
		],
	});

	return file;
}
