// Disable for now; partners might run into lots of issues when using a case-insensitive VCS.
// const CaseSensitivePathsPlugin = require('case-sensitive-paths-webpack-plugin');
import CssMinimizerPlugin from 'css-minimizer-webpack-plugin';
import HtmlWebpackPlugin from 'html-webpack-plugin';
import MiniCssExtractPlugin from 'mini-css-extract-plugin';
import TerserPlugin from 'terser-webpack-plugin';
import path from 'path';
import picomatch from 'picomatch';
import webpack from 'webpack';

import determineReactRuntime from '../src/helpers/determineReactRuntime.js';
import normalisePath from '../src/helpers/normalisePath.js';

import getNamesAndPaths from './helpers/getNamesAndPaths.js';

import CheckDeepImportsResolvePlugin from './webpackPlugins/CheckDeepImportsResolvePlugin.js';
import CopyPlugin from './webpackPlugins/CopyPlugin.js';
import DependenciesInLoadOrderPlugin from './webpackPlugins/DependenciesInLoadOrderPlugin.js';
import FdtOutputPlugin from './webpackPlugins/FdtOutputPlugin.js';
import RemoveExplicitExtensionResolvePlugin from './webpackPlugins/RemoveExplicitExtensionResolvePlugin.js';
import ResolveImportAliasPlugin from './webpackPlugins/ResolveImportAliasPlugin.js';
import UnitTestPlugin from './webpackPlugins/UnitTestPlugin.js';

export function makeGlobPatternRegexp(input, options = {}) {
	return picomatch.makeRe(input, { windows: process.platform === 'win32', ...options });
}

export default function getWebpackConfig(appConfig, appManifest, options) {
	const { names, paths } = getNamesAndPaths(appConfig, options);

	const resolveExtensions = ['.js', '.jsx', '.ts', '.tsx'];

	const regExps = {
		// Filetypes
		assets: makeGlobPatternRegexp('**/assets/**/*'),
		code: makeGlobPatternRegexp('**/*.@(js|jsx|ts|tsx)'),
		css: makeGlobPatternRegexp('**/*.css'),
		json: makeGlobPatternRegexp('**/*.json'),
		raw:
			appManifest._rawLoaderExtensions &&
			appManifest._rawLoaderExtensions.length
				? makeGlobPatternRegexp(
						`**/*.@(${appManifest._rawLoaderExtensions
							.map((extension) => extension.replace(/^\./, ''))
							.join('|')})`
				  )
				: null,
		svg: makeGlobPatternRegexp('**/*.svg'),
		xqm: makeGlobPatternRegexp('**/*.xqm'),

		// Files
		generatedFile: makeGlobPatternRegexp(paths.generatedFile),

		// Folders
		config: makeGlobPatternRegexp(`${paths.configFolder}**/*`),
		packages: makeGlobPatternRegexp(`${paths.packagesFolder}**/*`),
		packagesShared: makeGlobPatternRegexp(`${paths.packagesSharedFolder}**/*`),
		platform: makeGlobPatternRegexp(`${paths.platformFolder}**/*`),
		platformVendors: makeGlobPatternRegexp(`${paths.platformVendorsFolder}**/*`),
		platformLinkedVendors: makeGlobPatternRegexp(
			`${paths.platformLinkedVendorsFolder}**/*`
		),
		bootstrapFolder: makeGlobPatternRegexp(`${paths.bootstrapFolder}**/*`),
		testAssets: makeGlobPatternRegexp(`${paths.testAssetsFolder}**/*`),

		// Fds imports
		// TODO: Remove backward compatibility, this is for pre 7.16.0 editors.
		platformVendorsFdsImport: makeGlobPatternRegexp(
			`${paths.platformFolder}fontoxml-vendors/src/fds/*`
		),
		platformLinkedVendorsFdsImport: makeGlobPatternRegexp(
			`${paths.platformLinkedFolder}fontoxml-vendors/src/fds/*`
		),

		// Deep imports
		platformDeepImport: makeGlobPatternRegexp(
			`${paths.platformFolder}*/src/*/**/*`
		),
		platformLinkedDeepImport: makeGlobPatternRegexp(
			`${paths.platformLinkedFolder}*/src/*/**/*`
		),
	};

	// Used to share some state between (resolve) plugins.
	const fdtOutputPlugin =
		!appConfig.verbose && options.fdtResponse
			? new FdtOutputPlugin({
					inDevelopmentMode: options.inDevelopmentMode,
					res: options.fdtResponse,
			  })
			: null;

	// Whether to use the automatic JSX runtime (requires React 16.14+).
	const reactRuntime = determineReactRuntime(paths);

	return {
		context: paths.bootstrapFolder,
		entry: !options.unitTest ? paths.entryFile : undefined,
		// @TODO: Evaluate performance difference with 'cheap-module-eval-source-map'.
		devtool: options.inDevelopmentMode ? 'eval-source-map' : false,
		mode: options.inDevelopmentMode ? 'development' : 'production',
		module: {
			rules: [
				{
					test: (resource) =>
						!regExps.assets.test(resource) &&
						regExps.css.test(resource),
					use: [
						{
							loader: MiniCssExtractPlugin.loader,
						},
						{
							loader: 'css-loader',
							options: {
								url: false,
							},
						},
					],
				},
				{
					test: (resource) =>
						(!regExps.assets.test(resource) &&
							regExps.raw &&
							regExps.raw.test(resource)) ||
						(options.unitTest &&
							regExps.testAssets.test(resource) &&
							!regExps.code.test(resource) &&
							!regExps.json.test(resource)),
					type: 'asset/source',
				},
				// {
				// 	test: (resource) =>
				// 		regExps.platform.test(resource) &&
				// 		!regExps.platformVendors.test(resource) &&
				// 		!regExps.assets.test(resource) &&
				// 		regExps.code.test(resource),
				// 	use: [
				// 		{
				// 			loader: paths.platformSourceMapLoader,
				// 			options: {
				// 				platformFolder: paths.platformFolder,
				// 				platformSourceMapFile:
				// 					paths.platformSourceMapFile,
				// 			},
				// 		},
				// 	],
				// },
				{
					test: (resource) =>
						regExps.platformLinkedVendors.test(resource) &&
						!regExps.assets.test(resource) &&
						regExps.code.test(resource),
					use: [
						{
							loader: paths.vendorsSourceMapLoader,
						},
					],
				},
				{
					test: (resource) =>
						// @TODO: Assume a 'platform-linked' folder instead of a 'platform' folder.
						!options.unitTest &&
						regExps.platform.test(resource) &&
						!regExps.assets.test(resource) &&
						regExps.code.test(resource),
					type: 'javascript/auto',
					resolve: {
						fullySpecified: false,
					},
				},
				{
					test: (resource) =>
						// @TODO: Assume a 'platform-linked' folder instead of a 'platform' folder.
						(options.unitTest ||
							!regExps.platform.test(resource)) &&
						!regExps.platformLinkedVendors.test(resource) &&
						!regExps.assets.test(resource) &&
						regExps.code.test(resource),
					type: 'javascript/auto',
					resolve: {
						fullySpecified: false,
					},
					use: [
						{
							// @TODO: Options can potentially be shared with build-platform.
							loader: 'babel-loader',
							options: {
								babelrc: false,
								browserslistConfigFile: false,
								// This setting is babel-loader specific.
								cacheDirectory: true,
								configFile: false,
								cwd: paths.editorModuleFolder,
								highlightCode: false,
								presets: [
									[
										'@babel/preset-env',
										{
											bugfixes: true,
											ignoreBrowserslistConfig: true,
											loose: true,
											targets: { esmodules: true },
										},
									],
									[
										'@babel/preset-react',
										{
											runtime: reactRuntime,
										},
									],
									[
										'@babel/preset-typescript',
										{
											allowDeclareFields: true,
											onlyRemoveTypeImports: true,
										},
									],
								],
								plugins: [
									options.unitTest &&
										options.unitTest.inCoverageMode && [
											'babel-plugin-istanbul',
											{
												// Only instrument the code of the package being tested.
												cwd: paths.contextFolder,
												include: [
													'src/**/*.@(js|jsx|ts|tsx)',
												],
											},
										],
								].filter(Boolean),
								targets: { esmodules: true },
							},
						},
					],
				},
				{
					test: (resource) =>
						!regExps.assets.test(resource) &&
						regExps.svg.test(resource),
					use: [
						{
							loader: paths.symbolLoader,
							options: {
								className: 'SVGModule',
								importPath:
									'fontoxml-modular-ui/src/api/SVGModule',
							},
						},
					],
				},
				{
					test: (resource) =>
						!regExps.assets.test(resource) &&
						regExps.xqm.test(resource),
					use: [
						{
							loader: paths.symbolLoader,
							options: {
								className: 'XQueryModule',
								importPath:
									'fontoxml-selectors/src/api/XQueryModule',
							},
						},
					],
				},
				{
					test: regExps.generatedFile,
					use: [
						{
							loader: paths.generatedLoader,
							options: {
								appManifest,
								disallowedExtensions: resolveExtensions,
								isDebugBuild: options.inDevelopmentMode,
								platformFolder: paths.platformFolder,
							},
						},
					],
				},
			],
		},
		node: false,
		optimization: {
			// Minification is controlled by the value of 'mode'.
			minimizer: [
				new TerserPlugin({
					extractComments: false,
					terserOptions: {
						// Whitespace removal and mangling suffices.
						// See https://github.com/terser/terser#terser-fast-minify-mode
						compress: false,
						mangle: options.mangle,
						module: true,
						output: {
							comments: false,
						},
					},
				}),
				new CssMinimizerPlugin({
					minimizerOptions: {
						preset: 'default',
					},
				}),
			],
		},
		output: {
			clean: !options.inDevelopmentMode,
			filename: !options.unitTest ? names.outputJsFile : undefined,
			path: options.unitTest
				? options.unitTest.outputFolder
				: paths.outputFolder,
			devtoolModuleFilenameTemplate: (info) => {
				return `fonto://Fonto/${normalisePath(
					path.relative(
						regExps.bootstrapFolder.test(info.absoluteResourcePath)
							? paths.bootstrapFolder
							: paths.contextFolder,
						info.absoluteResourcePath
					)
				)}`;
			},
		},
		performance: {
			maxAssetSize: 10000000,
			maxEntrypointSize: 10000000,
		},
		plugins: [
			// new CaseSensitivePathsPlugin(),
			new CopyPlugin({
				contextFolder: paths.contextFolder,
				bootstrapFolder: paths.bootstrapFolder,
				platformFolder: paths.platformFolder,
				unitTest: options.unitTest,
			}),
			new DependenciesInLoadOrderPlugin({
				packageRootFolders: paths.packageRootFolders,
				rootPackageName: options.unitTest
					? options.unitTest.packageName
					: 'config',
				rootPackagePath: options.unitTest
					? paths.contextFolder
					: paths.configFolder,
			}),
			new MiniCssExtractPlugin({
				filename: names.outputCssFile,
			}),
			fdtOutputPlugin ||
				(!options.unitTest && new webpack.ProgressPlugin()),
			!options.unitTest &&
				new HtmlWebpackPlugin({
					editor: {
						favicon: appManifest.favicon,
						supportedBrowsers: JSON.stringify(
							appManifest.supportedBrowsers
						),
						title: appManifest.name,
					},
					inject: false,
					minify: false,
					template: paths.htmlTemplateFile,
				}),
			!!options.unitTest &&
				new UnitTestPlugin({
					inCiMode: options.unitTest.inCiMode,
					packageRootFolders: paths.packageRootFolders,
					rootPackageName: options.unitTest.packageName,
					rootPackagePath: paths.contextFolder,
				}),
			new ResolveImportAliasPlugin({
				inDevelopmentMode: options.inDevelopmentMode,
			}),
			new webpack.optimize.LimitChunkCountPlugin({
				// Never split code into multiple files.
				maxChunks: 1,
			}),
		].filter(Boolean),
		resolve: {
			alias: {
				'config/configuration': paths.appConfigurationFile,
				'config/fonto-manifest.json': paths.appConfigManifestFile,
				'config/schemaExperienceResolver':
					paths.appSchemaExperienceResolverFile,

				...(options.unitTest && {
					'fontoxml-unit-test-generated': paths.generatedFile,
					[options.unitTest.packageName]: paths.contextFolder,
					// @TODO: Check what this is used for.
					[`${options.unitTest.packageName}$`]: path.join(
						paths.contextFolder,
						'src',
						'main'
					),
				}),
			},
			plugins: [
				new RemoveExplicitExtensionResolvePlugin({
					extensions: resolveExtensions,
				}),
				!options.unitTest &&
					new CheckDeepImportsResolvePlugin({
						extensions: resolveExtensions,
						contextFolder: paths.contextFolder,
						issuerRegExps: [
							regExps.packages,
							regExps.packagesShared,
							regExps.config,
						],
						importPathRegExps: [
							regExps.platformDeepImport,
							regExps.platformLinkedDeepImport,
						],
						importPathExcludeRegExps: [
							regExps.platformVendorsFdsImport,
							regExps.platformLinkedVendorsFdsImport,
						],
						fdtOutputPlugin,
					}),
			].filter(Boolean),
			// Module resolution is attempted in the order defined here.
			modules: paths.packageRootFolders,
			symlinks: false,
			extensions: resolveExtensions,
		},
		infrastructureLogging: {
			level: appConfig.verbose ? 'verbose' : 'none',
		},
		stats: appConfig.verbose ? 'detailed' : 'none',
	};
}
