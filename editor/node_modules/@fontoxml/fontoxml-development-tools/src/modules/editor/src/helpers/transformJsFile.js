import babel from '@babel/core';
import path from 'path';
import { fileURLToPath } from 'url';

import {
	defaultBabelPlugins,
	defaultBabelValidationPlugins,
	importAliases,
	mainJsModuleNames,
	namedExportModuleNames,
} from '../config.js';

import recastPlugin from '../babelPlugins/recastPlugin.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const pluginPath = path.resolve(__dirname, '..', 'babelPlugins');

/**
 * Transform a single javascript file with a set of configured babel transformers.
 *
 * @param {Object}   file      The file object.
 * @param {string[]} [plugins] The babel plugins to use.
 *
 * @return {Promise}
 */
export default async function transformJsFile(
	file,
	plugins = defaultBabelPlugins,
) {
	const pluginOptions = {
		defaultBabelPlugins,
		defaultBabelValidationPlugins,
		importAliases,
		mainJsModuleNames,
		namedExportModuleNames,
		warningsByFilename: file.warningsByFilename,
	};
	const babelTransformResult = await babel.transformFileAsync(file.filePath, {
		babelrc: false,
		comments: true,
		compact: false,
		configFile: false,
		cwd: __dirname,
		sourceMaps: false,
		plugins: [
			// Use recast parse and print.
			[recastPlugin, pluginOptions],

			// Allow non default syntax.
			'@babel/plugin-syntax-jsx',
			'@babel/plugin-syntax-class-properties',
			'@babel/plugin-syntax-object-rest-spread',

			...plugins.map((pluginName) => [
				path.join(pluginPath, `${pluginName}.cjs`),
				pluginOptions,
			]),
		],
	});

	Object.keys(babelTransformResult).forEach((key) => {
		file[key] = babelTransformResult[key];
	});

	return file;
}
