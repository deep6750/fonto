const getDescendantNodes = require('../astHelpers/getDescendantNodes.cjs');
const moveComments = require('../astHelpers/moveComments.cjs');

module.exports = (babel, options, _cwd) => {
	const { types: t, template } = babel;

	const buildConfigurationManagerImport = template(
		`import IDENTIFIER from 'fontoxml-configuration/configurationManager';`
	);

	const configurationManagerGetConfigVariableDeclarationKind = 'let';

	const buildConfigurationManagerGetConfig = template(
		`${configurationManagerGetConfigVariableDeclarationKind} IDENTIFIER = CM_IDENTIFIER.get('KEY')`
	);

	function isConfigurationManagerSource(source) {
		// Get the parts.
		//        'fontoxml-configuration/configurationManager'
		// source ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
		// part0   ^^^^^^^^^^^^^^^^^^^^^^
		// part1                          ^^^^^^^^^^^^^^^^^^^^
		const parts = source.split('/');

		// Is a source for the configurationManager.
		//
		// Correct 1:
		//         'fontoxml-configuration/configurationManager'
		// source  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
		// part0    ^^^^^^^^^^^^^^^^^^^^^^
		// partN-1                         ^^^^^^^^^^^^^^^^^^^^
		//
		// Correct 2:
		//         'fontoxml-configuration/src/configurationManager.js'
		// source  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
		// part0    ^^^^^^^^^^^^^^^^^^^^^^
		// partN-1                             ^^^^^^^^^^^^^^^^^^^^^^^
		//
		// Incorrect:
		//        'some-package/somePackageImport'
		// source ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
		// part0   ^^^^^^^^^^^^
		// part1                ^^^^^^^^^^^^^^^^^
		return (
			parts[0] &&
			parts[0] === 'fontoxml-configuration' &&
			(parts[parts.length - 1] === 'configurationManager' ||
				parts[parts.length - 1] === 'configurationManager.js')
		);
	}

	/**
	 * Find all configurationManager import specifiers.
	 *
	 * @param {NodePath} path The NodePath to search from.
	 * @returns {NodePath}
	 */
	function findFontoConfigurationManagerImportSpecifier(path) {
		// Get the Program path.
		const programPath = path.findParent((path) => path.isProgram());

		// Reduce all Statements in the Program body to zero or one ImportSpecifiers for the configurationManager.
		return programPath.get('body').reduce((specifier, path) => {
			if (specifier) {
				return specifier;
			}

			// Check if path is an ImportDeclaration with it's source set to a valid configurationManager source.
			//
			// Correct:
			//        import cM from 'fontoxml-configuration/configurationManager';
			// path   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   (ImportDeclaration)
			// source                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    (StringLiteral)
			//
			// Incorrect 1:
			//        import somePackageImport from 'some-package/somePackageImport';
			// path   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (ImportDeclaration)
			// source                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  (StringLiteral)
			//
			// Incorrect 2:
			//        export default 'something';
			// path   ^^^^^^^^^^^^^^^^^^^^^^^^^^^                                     (ExportDefaultDeclaration)
			// source                ^^^^^^^^^^^                                      (StringLiteral)
			if (
				!t.isImportDeclaration(path) ||
				!isConfigurationManagerSource(path.get('source').node.value)
			) {
				return specifier;
			}

			// Find the ImportDefaultSpecifier of path (ImportDeclaration), if any.
			//
			// Correct:
			//            import cM from 'fontoxml-configuration/configurationManager';
			// path       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      (ImportDeclaration)
			// specifiers        ^^
			// specifier0        ^^                                                          (ImportDefaultSpecifier)
			//
			// Incorrect 1:
			//            import * as cM from 'fontoxml-configuration/configurationManager';
			// path       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (ImportDeclaration)
			// specifiers        ^^^^^^^
			// specifier0        ^^^^^^^                                                     (ImportDefaultSpecifier)
			//
			// Incorrect 3:
			//            import { cM } from 'fontoxml-configuration/configurationManager';
			// path       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  (ImportDeclaration)
			// specifiers        ^^^^^^^
			// specifier0        ^^^^^^^                                                     (ImportSpecifier)
			//
			// Incorrect 3:
			//            import * as cM from 'fontoxml-configuration/configurationManager';
			// path       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (ImportDeclaration)
			// specifiers        ^^^^^^^
			// specifier0        ^^^^^^^                                                     (ImportNamespaceSpecifier)
			//
			// Incorrect 4:
			//            import   'fontoxml-configuration/configurationManager';
			// path       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^            (ImportDeclaration)
			// specifiers        ^
			return (
				path
					.get('specifiers')
					.find((specifier) =>
						t.isImportDefaultSpecifier(specifier)
					) || null
			);
		}, null);
	}

	function isConfigurationManagerGet(path, configurationManagerIdentifier) {
		if (
			!path.isVariableDeclaration({
				kind: configurationManagerGetConfigVariableDeclarationKind,
			})
		) {
			return false;
		}

		const declarations = path.get('declarations');
		if (!declarations || declarations.length !== 1) {
			return false;
		}

		const declaration = declarations[0];
		if (
			!declaration ||
			!declaration.isVariableDeclarator() ||
			!declaration.get('id').isIdentifier()
		) {
			return false;
		}

		const init = declaration.get('init');
		if (
			!init ||
			!init.isCallExpression() ||
			!init.get('arguments')[0] ||
			!init.get('arguments')[0].isStringLiteral()
		) {
			return false;
		}

		const callee = init.get('callee');
		if (!callee || !callee.isMemberExpression()) {
			return false;
		}

		const object = callee.get('object');
		const property = callee.get('property');
		if (
			!object ||
			!property ||
			object.node.name !== configurationManagerIdentifier.name ||
			!property.isIdentifier({ name: 'get' })
		) {
			return false;
		}

		return true;
	}

	function isImportDeclarationOrConfigurationGet(
		path,
		configurationManagerIdentifier
	) {
		if (path.isImportDeclaration()) {
			return true;
		}

		if (isConfigurationManagerGet(path, configurationManagerIdentifier)) {
			return true;
		}

		return false;
	}

	function getLastImportStatementOrConfigurationGet(
		path,
		configurationManagerIdentifier
	) {
		// Get the Program path.
		const programPath = path.findParent((path) => path.isProgram());

		// Reduce last ImportDeclaration or configurationManager.get(), if any.
		return programPath
			.get('body')
			.slice()
			.reverse()
			.find((path, index, paths) => {
				const pathIsImportDeclarationOrConfigurationGet =
					isImportDeclarationOrConfigurationGet(
						path,
						configurationManagerIdentifier
					);

				if (!pathIsImportDeclarationOrConfigurationGet) {
					return false;
				}

				// Only match if all previous paths in program body also are an ImportDeclaration or
				// configurationManager.get(). This prevents adding after manual
				// configurationManager.get() calls.
				return paths
					.slice(index)
					.every((path) =>
						isImportDeclarationOrConfigurationGet(
							path,
							configurationManagerIdentifier
						)
					);
			});
	}

	return {
		visitor: {
			ImportDeclaration(path) {
				// Get the parts.
				//
				//             import someConfig from 'fontoxml-configuration/get!some-config';
				// path        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (ImportDeclaration)
				// specifier0         ^^^^^^^^^^                                                (ImportDefaultSpecifier)
				//  .local            ^^^^^^^^^^                                                (Identifier)
				// source                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (StringLiteral)
				// packageName                         ^^^^^^^^^^^^^^^^^^^^^^
				const source = path.node.source.value;
				const packageName = source.split('/')[0];

				// Skip all non-configuration imports.
				if (packageName !== 'fontoxml-configuration') {
					return;
				}

				// Modify the configuration ImportDeclarations that import a configuration variable.
				if (!source.startsWith('fontoxml-configuration/get!')) {
					return;
				}

				// Imports to fontoxml-configuration/get! only supports a single ImportDefaultSpecifier,
				// make sure that is the only thing available.
				//
				// Incorrect 1:
				//            import   from 'fontoxml-configuration/get!some-config';
				// source                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^           (StringLiteral)
				// specifiers        ^                                                          (None)
				//
				// Incorrect 2:
				//            import i1, { i2 }  from 'fontoxml-configuration/get!some-config';
				// source                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (StringLiteral)
				// specifiers        ^^^^^^^^^^
				// specifier0        ^^                                                         (ImportDefaultSpecifier)
				//  .local           ^^                                                         (Identifier)
				// specifier1              ^^                                                   (ImportSpecifier)
				//  .local                 ^^                                                   (Identifier)
				if (path.node.specifiers.length !== 1) {
					options.warningsByFilename.add(
						this.file.opts.filename,
						path.buildCodeFrameError(
							`Imports to ${source} can only use a single default import specifier, a manual fix is required.`
						)
					);
					return;
				}

				// Make sure there is a default specifier.
				//
				// Correct:
				//            import i1 from 'fontoxml-configuration/get!some-config';
				// path       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      (ImportDeclaration)
				// specifiers        ^^
				// specifier0        ^^                                                     (ImportDefaultSpecifier)
				//  .local           ^^                                                     (Identifier)
				//
				// Incorrect 1:
				//            import { i1 } from 'fontoxml-configuration/get!some-config';
				// specifiers        ^^^^^^
				// specifier0          ^^                                                   (ImportSpecifier)
				//  .local             ^^                                                   (Identifier)
				//
				// Incorrect 2:
				//            import * as i1 from 'fontoxml-configuration/get!some-config';
				// specifiers        ^^^^^^^
				// specifier0        ^^^^^^^                                                (ImportNamespaceSpecifier)
				//  .local                ^^                                                (Identifier)
				//
				// Incorrect 3:
				//            import   'fontoxml-configuration/get!some-config';
				// specifiers        ^
				const importDefaultSpecifier = path.node.specifiers[0];
				if (!t.isImportDefaultSpecifier(importDefaultSpecifier)) {
					options.warningsByFilename.add(
						this.file.opts.filename,
						path.buildCodeFrameError(
							`Imports to ${source} can only use a single default import specifier, a manual fix is required.`
						)
					);
					return;
				}

				// Get the configuration key.
				//
				//             import someConfig from 'fontoxml-configuration/get!some-config';
				// path        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (ImportDeclaration)
				// source                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (StringLiteral)
				// key                                                            ^^^^^^^^^^^
				const configurationKey = source.split('!')[1];

				// Find the existing configurationManager import, if any.
				const configurationManagerImportSpecifier =
					findFontoConfigurationManagerImportSpecifier(path);

				// Get the identifier for the existing configurationManager, or create a new one.
				const configurationManagerIdentifierName =
					'configurationManager';
				let configurationManagerIdentifier;
				if (configurationManagerImportSpecifier) {
					configurationManagerIdentifier =
						configurationManagerImportSpecifier.node.local;
				} else if (
					path.scope.hasBinding(configurationManagerIdentifierName) ||
					path.scope.hasReference(configurationManagerIdentifierName)
				) {
					// TODO: generateUidIdentifier results in a additional newline after the ImportDeclaration and let variables.
					configurationManagerIdentifier =
						path.scope.generateUidIdentifier(
							configurationManagerIdentifierName
						);
				} else {
					configurationManagerIdentifier = t.identifier(
						configurationManagerIdentifierName
					);
				}

				// Configuration import, make sure we have a single configurationManager import.
				if (!configurationManagerImportSpecifier) {
					// There is no configurationManager import yet. Add a new ImportDeclaration for it.
					//
					// Input:
					//      import someConfig from 'fontoxml-configuration/get!some-config';
					// path ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      (ImportDeclaration)
					//
					// Output:
					//           import cM from 'fontoxml-configuration/configurationManager';
					// path-1    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    (ImportDeclaration)
					// configMgr        ^^                                                        (ImportDefaultSpecifier / Identifier)
					//           import someConfig from 'fontoxml-configuration/get!some-config';
					// path      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (ImportDeclaration)
					path.insertBefore(
						buildConfigurationManagerImport({
							IDENTIFIER: configurationManagerIdentifier,
						})
					);
				} else {
					// Get the configurationManager ImportDeclaration.
					//
					//                import cM from 'fontoxml-configuration/configurationManager';
					// configMgr             ^^                                                        (ImportDefaultSpecifier / Identifier)
					//  .findParent() ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    (ImportDeclaration)
					//                import someConfig from 'fontoxml-configuration/get!some-config';
					// path           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (ImportDeclaration)
					const configurationManagerImportDeclaration =
						configurationManagerImportSpecifier.findParent((path) =>
							path.isImportDeclaration()
						);

					// Check if the existing configurationManager ImportDeclaration is before or after the configuration get.
					if (path.key < configurationManagerImportDeclaration.key) {
						// Move the configurationManagerImport to above the configuration get.
						//
						// Input:
						//                import someConfig from 'fontoxml-configuration/get!some-config';
						// path           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (ImportDeclaration)
						//                import cM from 'fontoxml-configuration/configurationManager';
						// path+n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    (ImportDeclaration)
						// configMgr             ^^                                                        (ImportDefaultSpecifier / Identifier)
						//  .findParent() ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    (ImportDeclaration)
						//
						// Output:
						//                import cM from 'fontoxml-configuration/configurationManager';
						// path-1         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (ImportDeclaration)
						//                import someConfig from 'fontoxml-configuration/get!some-config';
						// path           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (ImportDeclaration)
						// Note the configurationManager import which was after the configurationGet, is cloned,
						// inserted before the configurationGet, and removed from it's original location.
						const configurationManagerImportDeclarationClone =
							t.cloneNode(
								configurationManagerImportDeclaration.node,
								true
							);
						moveComments.asIs(
							babel,
							configurationManagerImportDeclarationClone,
							...getDescendantNodes(
								configurationManagerImportDeclaration
							)
						);
						path.insertBefore(
							configurationManagerImportDeclarationClone
						);
						configurationManagerImportDeclaration.remove();
					}
				}

				// Replace every reference to the imported configuration value with a call to
				// configurationManager.get() with the appropriate configurationKey.
				// And make sure they are all added after the last ImportDeclaration.
				//
				// Input:
				//            import cM from 'fontoxml-configuration/configurationManager';
				// configMgr         ^^                                                        (ImportDefaultSpecifier / Identifier)
				//            import someConfig from 'fontoxml-configuration/get!some-config';
				// path       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (ImportDeclaration)
				// specifier0        ^^^^^^^^^^                                                (ImportDefaultSpecifier)
				//  .local           ^^^^^^^^^^                                                (Identifier)
				// key                                                           ^^^^^^^^^^^
				//
				// Output:
				//           import cM from 'fontoxml-configuration/configurationManager';
				//           let someConfig = cM.get('some-config');
				// path      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                           (VariableDeclaration)
				// paramId         ^^^^^^^^                                                    (Identifier)
				// configMgr                  ^^                                               (Identifier)
				// key                               ^^^^^^^^^^^^^                             (StringLiteral)
				const paramIdentifier = path.get('specifiers.0').node.local;
				const configurationManagerGetConfig =
					buildConfigurationManagerGetConfig({
						CM_IDENTIFIER: configurationManagerIdentifier,
						IDENTIFIER: paramIdentifier,
						KEY: configurationKey,
					});
				moveComments.asIs(
					babel,
					configurationManagerGetConfig,
					...getDescendantNodes(path)
				);
				const lastImportStatementOrConfigurationGet =
					getLastImportStatementOrConfigurationGet(
						path,
						configurationManagerIdentifier
					);
				/* istanbul ignore else */
				if (lastImportStatementOrConfigurationGet) {
					// Add the configurationManager.get() after the last ImportDeclaration or
					// configurationManager.get(), and remove path.
					lastImportStatementOrConfigurationGet.insertAfter(
						configurationManagerGetConfig
					);
					path.remove();
				} else {
					// Replace the ImportDeclaration with configurationManager.get().
					path.replaceWith(configurationManagerGetConfig);
				}
			},
		},
	};
};
