const addWarningsForRemovedComments = require('../astHelpers/addWarningsForRemovedComments.cjs');

function getImportDeclarationForPath(path, { packageName, fileName, loaders }) {
	const binding = path.scope.getBinding(path.node.name);

	if (
		!binding ||
		!binding.path ||
		!binding.path.parentPath.isImportDeclaration()
	) {
		return false;
	}

	const importDeclarationPath = binding.path.parentPath;
	const importDeclarationSource = importDeclarationPath.node.source.value;
	const importLoaders = importDeclarationSource.split('!');
	const importPathParts = importLoaders.pop().split('/');
	const importPackageName = importPathParts[0];
	const importFileName = importPathParts[importPathParts.length - 1]
		.split('.')
		.slice(0, -1)
		.join('.');

	if (packageName && importPackageName !== packageName) {
		return false;
	}

	if (fileName && importFileName !== fileName) {
		return false;
	}

	if (
		loaders &&
		(importLoaders.length !== loaders.length ||
			!importLoaders.every((loader, index) => loaders[index] === loader))
	) {
		return false;
	}

	return importDeclarationPath;
}

module.exports = (_babel, options, _cwd) => {
	return {
		visitor: {
			CallExpression(path) {
				const callee = path.get('callee');
				const calleeImportDeclarationPath = getImportDeclarationForPath(
					callee,
					{
						packageName: 'fontoxml-selectors',
						fileName: 'registerXQueryModule',
					}
				);
				if (!calleeImportDeclarationPath) {
					return false;
				}

				const modulePath = path.get('arguments.0');
				const moduleImportDeclarationPath = getImportDeclarationForPath(
					modulePath,
					{
						loaders: ['text'],
					}
				);
				if (!moduleImportDeclarationPath) {
					return false;
				}

				// Remove the module- path, binding, and import.
				// TODO: Move comments
				addWarningsForRemovedComments(
					options.warningsByFilename,
					this.file.opts.filename,
					modulePath,
					moduleImportDeclarationPath
				);
				const modulePathBinding = modulePath.scope.getBinding(
					modulePath.node.name
				);
				modulePathBinding.dereference();
				modulePath.remove();
				moduleImportDeclarationPath.remove();

				// Remove the registerXQueryModule CallExpression, or it's parent ExpressionStatement.
				// TODO: Move comments
				/* istanbul ignore next */
				const pathToRemove = path.parentPath.isExpressionStatement()
					? path.parentPath
					: path;
				addWarningsForRemovedComments(
					options.warningsByFilename,
					this.file.opts.filename,
					pathToRemove
				);
				pathToRemove.remove();

				// Only remove calleeImportDeclarationPath when it is not used anywhere else.
				const calleeBinding = callee.scope.getBinding(callee.node.name);
				if (calleeBinding && calleeBinding.references === 1) {
					// TODO: Move comments
					addWarningsForRemovedComments(
						options.warningsByFilename,
						this.file.opts.filename,
						calleeImportDeclarationPath
					);
					calleeImportDeclarationPath.remove();
				}
				calleeBinding.dereference();
			},
		},
	};
};
