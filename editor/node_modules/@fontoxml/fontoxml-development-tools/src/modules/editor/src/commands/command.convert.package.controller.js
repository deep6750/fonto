import fastGlob from 'fast-glob';
import fs from 'fs-extra';
import pMap from 'p-map';
import path from 'path';
import { performance } from 'perf_hooks';

import outputWarningsByFilename from '../helpers/outputWarningsByFilename.js';
import prettifyJsFile from '../helpers/prettifyJsFile.js';
import renameJsxFile from '../helpers/renameJsxFile.js';
import transformJsFile from '../helpers/transformJsFile.js';
import validateJsFile from '../helpers/validateJsFile.js';
import WarningsByFilename from '../helpers/WarningsByFilename.js';
import writeJsFileToDisk from '../helpers/writeJsFileToDisk.js';
import { promptConfirm } from '../../../editor-pre-7-7-0/src/api/enquirerPrompts.js';

export default async function editorConvertPackageCommand(req, res) {
	res.caption(req.command.getLongName());

	const doNotOverwrite = req.options['no-overwrite'];
	const doNotSaveWarnings = req.options['no-save-warnings'];
	const paths = {
		inputDir: path.join(process.cwd()),
		outputDir: doNotOverwrite
			? path.join(
					process.cwd(),
					'..',
					`${path.basename(process.cwd())}-out`
			  )
			: path.join(process.cwd()),
	};

	res.properties({
		'Overwrite in place': !doNotOverwrite,
		'Save warnings': !doNotSaveWarnings,
		'Input path': paths.inputDir,
		'Output path': paths.outputDir,
	});
	res.break();

	if (
		!doNotOverwrite &&
		!(await promptConfirm(
			'The conversion will overwrite all files in the working directory, are you sure you want to continue?',
		))
	) {
		res.break();
		res.notice('Aborted');
		return;
	}

	// TODO: Check if input dir is indeed a package folder.

	res.break();
	res.log('Converting package...');

	const startTime = performance.now();

	if (doNotOverwrite) {
		await fs.emptyDir(paths.outputDir);
		await fs.copy(paths.inputDir, paths.outputDir, { dereference: true });
	}

	const jsFilePaths = await fastGlob(['src/**/*.js', '!**/assets/**/*'], {
		absolute: true,
		cwd: paths.outputDir,
	});

	const warningsByFilename = new WarningsByFilename();

	await pMap(
		jsFilePaths,
		async (jsFilePath) => {
			try {
				const file = { filePath: jsFilePath, warningsByFilename };
				await transformJsFile(file);
				await prettifyJsFile(file, false);
				await renameJsxFile(file);
				await writeJsFileToDisk(file);
				await validateJsFile(file);
			} catch (error) {
				if (!error.message || !error.message.startsWith(jsFilePath)) {
					error.message = `${jsFilePath}: Error while converting file. ${error.message}`;
				}
				warningsByFilename.add(jsFilePath, error);
			}
		},
		{ concurrency: 8 }
	);

	res.break();
	res.caption('Warnings:');
	await outputWarningsByFilename(
		warningsByFilename,
		!doNotSaveWarnings ? paths.outputDir : null
	);
	res.break();

	const endTime = performance.now();
	res.success(`\nDone. (${Math.round(endTime - startTime)} ms)`);
}
