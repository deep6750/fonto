/**
 * hasMultipleReturnStatements
 *
 * Check for multiple return statements on a `NodePath`.
 *
 * @param {NodePath} path A `NodePath` of a `Function` so we can traverse the AST.
 * @returns {Boolean} Returns `true` if multiple return statements are found.
 */
function hasMultipleReturnStatements({ types: t }, path) {
	/* istanbul ignore if */
	if (!t.isFunction(path)) {
		throw path.buildCodeFrameError(
			`Expected a 'Function' but got '${path.node.type}'.`
		);
	}

	let occurrences = 0;

	path.get('body').traverse({
		/**
		 * The `Function` will match:
		 * - `arrowFunctionExpression`
		 * - `classMethod`
		 * - `functionDeclaration`
		 * - `functionExpression`
		 * - `objectMethod`
		 *
		 * Documentation: https://babeljs.io/docs/en/babel-types
		 */
		Function(innerPath) {
			innerPath.skip();
		},

		/**
		 * We are interested in all the `ReturnStatements` that aren't
		 * skipped by the `Function` visitor.
		 */
		ReturnStatement() {
			occurrences++;
		},
	});

	return occurrences > 1;
}

module.exports = hasMultipleReturnStatements;
