import getOperations from './getOperations.js';

function getOperationRegistry(workingDirectory, roots) {
	return getOperations(workingDirectory, roots).then((operationList) =>
		operationList.reduce((mapping, operation) => {
			if (!mapping[operation.operationName]) {
				mapping[operation.operationName] = operation;
			}

			return mapping;
		}, {})
	);
}

function expandOperationDefinition(mapping, operationName) {
	if (!mapping[operationName]) {
		throw new Error(`Operation "${operationName}" is not registered.`);
	}

	const operation = { ...mapping[operationName] };

	['steps', 'getStateSteps'].forEach((prop) => {
		if (!operation[prop]) {
			return;
		}

		if (!Array.isArray(operation[prop])) {
			operation[prop] = [operation[prop]];
		}

		operation[prop] = operation[prop].map((step) => {
			const type = step.type && step.type.split('/');
			if (type && type[0] === 'operation' && type[1]) {
				step.definition = expandOperationDefinition(mapping, type[1]);
			}

			return step;
		});
	});

	return operation;
}

export default function getOperation(
	workingDirectory,
	operationName,
	roots,
	_ignoreSymlinks
) {
	return getOperationRegistry(workingDirectory, roots).then((mapping) =>
		expandOperationDefinition(mapping, operationName)
	);
}
