import fastGlob from 'fast-glob';
import fs from 'fs';
import path from 'path';

export default function getOperations(workingDirectory, roots, ignoreSymlinks) {
	return fastGlob(
		Array.isArray(roots)
			? roots.map((root) => root.replace(/\\/g, '/') + '/**/operations?(-*).json')
			: [
					'packages/**/operations?(-*).json',
					'packages-shared/**/operations?(-*).json',
					'platform-linked/**/operations?(-*).json',
					'platform/**/operations?(-*).json',
			  ],
		{
			cwd: workingDirectory,
			followSymbolicLinks: !ignoreSymlinks,
		}
	).then((operationsJsons) => {
		return operationsJsons.reduce((allOps, operationsJson) => {
			const operations = JSON.parse(
				fs.readFileSync(
					path.join(workingDirectory, operationsJson),
					'utf-8'
				)
			);

			return allOps.concat(
				Object.keys(operations)
					.filter((operationName) => {
						// TODO: Expose __moduleImports__ in FDT.
						if (operationName === '__moduleImports__') {
							return false;
						}
						if (
							operationName === '$schema' &&
							typeof operations[operationName] === 'string'
						) {
							return false;
						}
						return !!operations[operationName];
					})
					.map((operationName) => {
						const operation = operations[operationName];
						operation.operationName = operationName;
						operation.operationFile = operationsJson;
						return operation;
					})
			);
		}, []);
	});
}
