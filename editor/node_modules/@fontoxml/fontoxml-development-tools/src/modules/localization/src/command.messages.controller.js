import path from 'path';

import createMessagesTable from './api/createMessagesTable.js';
import loadMessageBundle from './api/loadMessageBundle.js';

export default async function messagesCommand(req, res) {
	res.caption(req.command.getLongName());

	const isEditorRepositoryPath = !!req.fdt.editorRepository.path;
	if (isEditorRepositoryPath) {
		// Check if the output Editor Repository is compatible with the current FDT version.
		req.fdt.ensureCompatibilityWithFdt(
			req.fdt.editorRepository.sdkVersion,
			'instance',
			'editor'
		);
	}

	const destroySpinner = res.spinner(
		`Looking up messages for version "${req.fdt.version.format()}"...`
	);

	const messages = await loadMessageBundle(path.resolve(req.parameters.bundle));
	destroySpinner();
	res.break();

	const visibleMessages = messages
		.map((message) => message.toJSON())
		.filter((message) => {
			if (
				req.options['search-in'] &&
				message.in
					.toLowerCase()
					.indexOf(req.options['search-in'].toLowerCase()) === -1
			) {
				return false;
			}

			if (
				req.options['search-out'] &&
				(!message.out ||
					message.out
						.toLowerCase()
						.indexOf(req.options['search-out'].toLowerCase()) === -1)
			) {
				return false;
			}

			if (req.options['search-package']) {
				const hasPackageMatch = (message.meta || []).some((meta) => {
					return (
						meta.package &&
						meta.package
							.toLowerCase()
							.indexOf(req.options['search-package'].toLowerCase()) !== -1
					);
				});

				if (!hasPackageMatch) {
					return false;
				}
			}

			if (req.options['search-file']) {
				const hasFileMatch = (message.meta || []).some((meta) => {
					return (
						meta.file &&
						meta.file
							.toLowerCase()
							.indexOf(req.options['search-file'].toLowerCase()) !== -1
					);
				});

				if (!hasFileMatch) {
					return false;
				}
			}

			if (
				req.options['with-conflicts'] &&
				(!message.conflicts || !message.conflicts.length)
			) {
				return false;
			}

			if (
				req.options['without-conflicts'] &&
				message.conflicts &&
				message.conflicts.length
			) {
				return false;
			}

			if (req.options['with-out'] && !message.out) {
				return false;
			}

			if (req.options['without-out'] && message.out) {
				return false;
			}

			return true;
		});

	if (req.options['no-table']) {
		if (visibleMessages.length !== messages.length) {
			res.debug(
				`Found ${visibleMessages.length} messages across ${messages.length} messages.`,
			);
		}

		visibleMessages.forEach((message, index) => {
			res.caption(`Message ${index + 1}`);

			res.indent();
			res.properties({
				Original: message.in,
				Localized: message.out || '-',
				Conflicts: !message.conflicts ? '-' : message.conflicts.join('\n'),
				Metadata: !message.meta
					? '-'
					: message.meta
							.map((meta) => `${meta.package}/${meta.file}`)
							.join('\n'),
			});
			res.outdent();
		});
		return;
	}

	const table = await createMessagesTable(req.command.getModuleRegistration());
	table.print(
		res,
		req.options.columns,
		visibleMessages,
		req.options.sort,
		req.options.export,
	);
}
