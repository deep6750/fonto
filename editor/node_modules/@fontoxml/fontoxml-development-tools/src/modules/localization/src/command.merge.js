import path from 'path';

export default async (moduleRegistration, localizationCommand) => {
	localizationCommand
		.addCommand(
			'merge',
			path.resolve(
				moduleRegistration.getPath(),
				'src',
				'command.merge.controller.js'
			)
		)
		.setDescription('Merge multiple message bundles into a single bundle.')

		// Set to raw output when the output parameter is not set.
		.setRawOutput(
			(request) => request.parameters && !request.parameters.output
		)

		.addParameter(
			'output',
			'The destination message bundle. If omitted, will output to stdout.',
			false
		)

		.addOption(
			new moduleRegistration.MultiOption('bundles')
				.setDescription('The message (template) bundles to merge.')
				.setShort('b')
				.isRequired(true)
		)

		.addExample(
			`${
				moduleRegistration.getAppInfo().name
			} localization merge packages/localization/messages.en-US.json --bundles messages-template.json messagess-packages-template.json`,
			'Merge messages-template.json and messages-packages-template.json (template) bundles, and save them in a message bundle named message.en-US.json in the localization package.'
		)
		.addExample(
			`${
				moduleRegistration.getAppInfo().name
			} localization merge --bundles messages-template.json messagess-packages-template.json`,
			'Merge messages-template.json and messages-packages-template.json (template) bundles, and output to stdout.'
		);
};
