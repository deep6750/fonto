import fs from 'fs';
import path from 'path';

import fastGlob from 'fast-glob';

export default async function localizationContextInformer(req, res) {
	res.caption('Localization');

	let messageBundles;

	if (req.fdt.editorRepository.path) {
		messageBundles = fastGlob.sync(
			[
				'packages/**/messages.*.json',
				'packages-shared/**/messages.*.json',

				'messages*.json',
			],
			{ cwd: req.fdt.editorRepository.path },
		);
	}

	if (!messageBundles || !messageBundles.length) {
		res.debug('No localizations found.');
		return;
	}

	messageBundles.forEach((messageBundle) => {
		let messages;
		let messagesWithTranslation;
		try {
			// Don't use loadMessageBundle(), so we can do this in a non async way.
			messages = JSON.parse(
				fs.readFileSync(
					path.join(req.fdt.editorRepository.path, messageBundle),
				),
			);
			messagesWithTranslation = messages.filter((message) => !!message.out);
		} catch (_error) {
			res.definition(messageBundle, 'Could not load messages.');
			return;
		}

		res.definition(
			messageBundle,
			`${messages.length} messages${
				messagesWithTranslation.length
					? `, of which ${messagesWithTranslation.length} with a translation.`
					: '.'
			}`,
		);
	});
}
