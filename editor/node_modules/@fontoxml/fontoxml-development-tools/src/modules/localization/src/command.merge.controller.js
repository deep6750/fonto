import fs from 'fs/promises';
import path from 'path';

import deduplicateMessages from './api/deduplicateMessages.js';
import loadMessageBundle from './api/loadMessageBundle.js';

function outputPropertiesWithFormatter(res, properties, formatter) {
	const formattedProperties = Object.keys(properties).reduce(
		(accumulator, property) => {
			accumulator[property] = formatter(properties[property]);

			return accumulator;
		},
		{},
	);

	res.properties(formattedProperties);
}

export default function localizationMergeCommand(req, res) {
	if (req.parameters.output) {
		res.caption(req.command.getLongName());
	}

	const isEditorRepositoryPath = !!req.fdt.editorRepository.path;
	if (isEditorRepositoryPath) {
		// Check if the output Editor Repository is compatible with the current FDT version.
		req.fdt.ensureCompatibilityWithFdt(
			req.fdt.editorRepository.sdkVersion,
			'instance',
			'editor',
		);
	}

	let destroySpinner;
	if (req.parameters.output) {
		destroySpinner = res.spinner(
			`Loading message bundles for version "${req.fdt.version.format()}"...`,
		);
	}

	const stats = {};
	const loadMessagesPromises = req.options.bundles.map((bundle) => {
		return loadMessageBundle(bundle).then((messages) => {
			const resolvedPath = path.resolve(bundle);
			stats[path.basename(resolvedPath)] = {
				path: resolvedPath,
				messages,
			};
			return messages;
		});
	});

	return Promise.all(loadMessagesPromises)
		.then((messages) => {
			if (req.parameters.output) {
				destroySpinner();

				res.indent();
				outputPropertiesWithFormatter(res, stats, (stat) => {
					return `${stat.messages.length} messages`;
				});
				res.outdent();

				res.break();
				destroySpinner = res.spinner('Merging message bundles...');
			}

			return messages.flat();
		})
		.then(deduplicateMessages)
		.then((messages) => {
			if (!req.parameters.output) {
				res.raw(JSON.stringify(messages, null, '\t'));
				return messages;
			}
			return fs.writeFile(
				path.resolve(req.parameters.output),
				JSON.stringify(messages, null, '\t'),
			).then(() => messages);
		})
		.then((messages) => {
			if (req.parameters.output) {
				destroySpinner();
				res.debug(`Exported ${messages.length} messages to bundle.`);
			}
		});
}
