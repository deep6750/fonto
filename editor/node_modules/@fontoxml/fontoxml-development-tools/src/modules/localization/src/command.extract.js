import path from 'path';

export default async (moduleRegistration, localizationCommand) => {
	localizationCommand
		.addCommand(
			'extract',
			path.resolve(
				moduleRegistration.getPath(),
				'src',
				'command.extract.controller.js'
			)
		)
		.setDescription(
			'Extract messages from packages and save them in a message bundle template.'
		)

		// Set to raw output when the output parameter is not set.
		.setRawOutput(
			(request) => request.parameters && !request.parameters.output
		)

		.addParameter(
			'output',
			'The destination message template bundle. If omitted, will output to stdout.',
			false
		)

		.addOption(
			new moduleRegistration.MultiOption('paths')
				.setDescription(
					'The package path(s) from where to extract a messages.'
				)
				.setShort('p')
				.isRequired(false)
		)

		.addExample(
			`${
				moduleRegistration.getAppInfo().name
			} localization extract messages-packages-template.json --paths packages/test-package-1 packages/test-package-2`,
			'Extract messages from test-package-1 and test-package-2, and save them in a message template bundle named messages-packages-template.json.'
		)
		.addExample(
			`${
				moduleRegistration.getAppInfo().name
			} localization extract --paths packages/test-package-1 packages/test-package-2`,
			'Extract messages from test-package-1 and test-package-2, and output to stdout.'
		);
};
