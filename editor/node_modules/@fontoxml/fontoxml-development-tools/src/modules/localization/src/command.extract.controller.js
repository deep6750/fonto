import fs from 'fs/promises';
import path from 'path';

import deduplicateMessages from './api/deduplicateMessages.js';
import extractMessages from './api/extractMessages.js';

export default function localizationExtractCommand(req, res) {
	if (req.parameters.output) {
		res.caption(req.command.getLongName());
	}

	const isEditorRepositoryPath = !!req.fdt.editorRepository.path;
	if (isEditorRepositoryPath) {
		// Check if the output Editor Repository is compatible with the current FDT version.
		req.fdt.ensureCompatibilityWithFdt(
			req.fdt.editorRepository.sdkVersion,
			'instance',
			'editor',
		);
	}

	let destroySpinner;
	if (req.parameters.output) {
		destroySpinner = res.spinner(
			`Extracting messages from packages and saving to template bundle for version "${req.fdt.version.format()}"...`,
		);
	}

	let paths = req.options.paths;

	// TODO: This only works for one package, not for all packages. Is this correct?
	// If it is, the paths option needs clarification, add the documentation is incorrect at
	// (https://documentation.fontoxml.com/display/FE/.Localize+the+interface+v7.4.0)
	if (!paths || !paths.length) {
		paths = [process.cwd()];
	}

	const packageDescriptors = paths.map((packagePath) => {
		const resolvedPath = path.resolve(packagePath);
		return {
			name: path.basename(resolvedPath),
			path: resolvedPath,
		};
	});

	return extractMessages(packageDescriptors)
		.then(deduplicateMessages)
		.then((messages) => {
			if (!req.parameters.output) {
				res.raw(JSON.stringify(messages, null, '\t'));
				return messages;
			}
			return fs.writeFile(
				path.resolve(req.parameters.output),
				JSON.stringify(messages, null, '\t'),
			).then(() => messages);
		})
		.then((messages) => {
			if (req.parameters.output) {
				destroySpinner();
				res.debug(`Exported ${messages.length} messages to template bundle.`);
			}
		});
}
