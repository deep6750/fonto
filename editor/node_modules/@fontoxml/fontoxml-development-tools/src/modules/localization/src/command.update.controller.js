import fs from 'fs/promises';
import path from 'path';

import deduplicateMessages from './api/deduplicateMessages.js';
import loadMessageBundle from './api/loadMessageBundle.js';
import updateMessagesWithTemplate from './api/updateMessagesWithTemplate.js';

export default function localizationUpdateCommand(req, res) {
	if (!req.options['output-to-stdout']) {
		res.caption(req.command.getLongName());
	}

	const isEditorRepositoryPath = !!req.fdt.editorRepository.path;
	if (isEditorRepositoryPath) {
		// Check if the output Editor Repository is compatible with the current FDT version.
		req.fdt.ensureCompatibilityWithFdt(
			req.fdt.editorRepository.sdkVersion,
			'instance',
			'editor',
		);
	}

	let destroySpinner;
	if (!req.options['output-to-stdout']) {
		destroySpinner = res.spinner(
			`Updating message bundle for version "${req.fdt.version.format()}"...`,
		);
	}

	return Promise.all([
		loadMessageBundle(path.resolve(req.parameters.input)).then(
			deduplicateMessages,
		),
		// TODO: What/how if updated packages template (local package localizations) (multi support?)
		loadMessageBundle(path.resolve(req.parameters.template)),
	])
		.then(([messages, templateMessages]) =>
			updateMessagesWithTemplate(messages, templateMessages),
		)
		.then(({ messages, added, removed }) => {
			if (req.options['output-to-stdout']) {
				res.raw(JSON.stringify(messages, null, '\t'));
				return { messages, added, removed };
			}
			return fs.writeFile(
				req.parameters.input,
				JSON.stringify(messages, null, '\t'),
			).then(() => {
				return { messages, added, removed };
			});
		})
		.then(({ messages, added, removed }) => {
			if (!req.options['output-to-stdout']) {
				destroySpinner();
				res.debug(`Exported ${messages.length} messages to bundle.`);
				res.properties({
					[added.length]: 'need localization',
					[removed.length]: 'removed',
				});
			}
		});
}
