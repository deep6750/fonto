function outputLicenseInfoAndChanges(res, oldLicenseInfo, newLicenseInfo) {
	// Compare old and new license info.
	const licenseeHasChanged =
		oldLicenseInfo.licensee !== newLicenseInfo.licensee;
	const addedProductIds = newLicenseInfo.products
		.filter(
			(newProduct) =>
				!oldLicenseInfo.products.some(
					(oldProduct) => oldProduct.id === newProduct.id
				)
		)
		.map((product) => product.id);
	const changedProductLabelIds = oldLicenseInfo.products
		.filter((oldProduct) => {
			const newProduct = newLicenseInfo.products.find(
				(someNewProduct) => someNewProduct.id === oldProduct.id
			);
			return newProduct && oldProduct.label !== newProduct.label;
		})
		.map((product) => product.id);
	const removedProducts = oldLicenseInfo.products.filter(
		(oldProduct) =>
			!newLicenseInfo.products.some(
				(newProduct) => newProduct.id === oldProduct.id
			)
	);

	// Output the license info and mark the changes, if any.
	res.caption('License file path');
	res.log(newLicenseInfo.filepath);

	res.caption('Licensee');
	if (licenseeHasChanged) {
		res.log(
			`The licensee has been changed from "${oldLicenseInfo.licensee}" to "${newLicenseInfo.licensee}".`
		);
	} else {
		res.log(newLicenseInfo.licensee);
	}

	res.caption('Product licenses');
	res.list(
		newLicenseInfo.products.map(
			(product) =>
				`${product.label} [${product.id}]${
					addedProductIds.includes(product.id)
						? ' (Added to license)'
						: changedProductLabelIds.includes(product.id)
						? ' (Updated product name)'
						: ''
				}`
		),
		'-'
	);
	if (removedProducts.length) {
		res.list(
			removedProducts.map(
				(product) =>
					`${product.label} [${product.id}] (Removed from license)`
			),
			'-'
		);
	}

	return (
		addedProductIds.length ||
		changedProductLabelIds.length ||
		removedProducts.length ||
		licenseeHasChanged
	);
}

export default (moduleRegistration, licenseCommand) => {
	function validateCommand(req, res) {
		res.caption(req.command.getLongName());

		let oldLicenseInfo = null;
		const destroySpinner = res.spinner('Validating license...');
		return Promise.resolve()
			.then(() => {
				// Read the current license file, if any.
				req.fdt.license.ensureLicenseFileExists();
				oldLicenseInfo = req.fdt.license.getLicenseInfo();

				// Validate the license file remotely. Updating the file if needed.
				return req.fdt.license.validateAndUpdateLicenseFile();
			})
			.catch((error) => {
				res.destroyAllSpinners();

				if (oldLicenseInfo) {
					res.caption('License file path');
					res.log(oldLicenseInfo.filepath);
					// Output the licensee, if any.
					if (oldLicenseInfo.licensee) {
						res.caption('Licensee');
						res.log(oldLicenseInfo.licensee);
					}
				}

				error.message = error.message.replace(
					`Run '${
						moduleRegistration.getAppInfo().name
					} license validate' to check your license.`,
					'Please contact support about your license.'
				);

				throw error;
			})
			.then(() => {
				// Get the (possibly updated) license info.
				const newLicenseInfo = req.fdt.license.getLicenseInfo();

				destroySpinner();
				const hasLicenseChanges = outputLicenseInfoAndChanges(
					res,
					oldLicenseInfo,
					newLicenseInfo
				);

				if (hasLicenseChanges) {
					res.break();
					res.notice('Your license file has been updated.');
				}
			})
			.catch((error) => {
				res.destroyAllSpinners();
				throw error;
			});
	}

	licenseCommand
		.addCommand('validate', validateCommand)
		.setDescription(
			'Check the currently installed license and validate it online. This will update your license if it has been changed remotely.'
		)

		.addExample(
			`${moduleRegistration.getAppInfo().name} license validate`,
			'Check the currently installed license and validate it online.'
		);
};
