function leftAlign(text, lineWidth) {
	if (text.length < lineWidth) {
		text = '\xa0'.repeat(lineWidth - text.length) + text;
	}
	return text;
}

export default (moduleRegistration, app, opts) => {
	const logoConfig = moduleRegistration.registerConfiguration(
		'logo',
		{
			logoIndex: 0,
		},
		() => {
			return null;
		}
	);

	app.cli.addOption('version', 'v', `Output the current version.`);

	// Set to raw output when the version option is set.
	app.cli.setRawOutput((request) => !!request.options.version);

	app.cli.setController(function fdtController(req, res) {
		if (req.options.version) {
			let format = req.options.version;
			if (format === true) {
				format = 'full';
			}
			res.raw(moduleRegistration.getAppInfo().version.format(format));
			return;
		}
		const logos = logoConfig.logos || [['Fonto Development Tools']];

		res.break();
		let maxLineLength = 0;
		if (logos.length && !opts.silent) {
			logos[(logoConfig.logoIndex || 0) % logos.length]
				.map((line) => {
					if (maxLineLength < line.length) {
						maxLineLength = line.length;
					}
					return `  ${line}`;
				})
				.forEach((line) => {
					res.raw(`${line}\n`);
				});
		} else {
			res.caption(moduleRegistration.getAppInfo().name);
		}

		if (moduleRegistration.getAppInfo().version) {
			res.break();
			const appVersion = moduleRegistration.getAppInfo().version;
			res.debug(
				leftAlign(
					`Fonto Development Tools ${
						appVersion.isUnversioned
							? appVersion.format()
							: `v${appVersion.format()}${
									app.isLocalVersion ? ' (local clone)' : ''
							  }`
					}`,
					maxLineLength
				)
			);
		}

		res.break();
		res.notice(
			`Run "${
				moduleRegistration.getAppInfo().name
			} --help" to show usage information.`
		);
	});
};
