import inspector from 'inspector';

export default (moduleRegistration, app) => {
	function debugController(req, res) {
		const inspect = !!req.options['fdt-inspect'] || process.env.FDT_INSPECT;
		const inspectAndBreak =
			!!req.options['fdt-inspect-brk'] || process.env.FDT_INSPECT_BRK;

		if (!inspect && !inspectAndBreak) {
			return;
		}

		// NOTE: There is also a FDT_STACK_TRACE_ON_ERROR environment option which just sets the
		// hideStacktraceOnErrors option to false.
		app.hideStacktraceOnErrors = false;

		try {
			inspector.open(undefined, undefined, inspectAndBreak);

			if (inspectAndBreak) {
				// eslint-disable-next-line no-debugger
				debugger;
			}
		} catch (_error) {
			res.notice(
				`Could not initiate debugger, try using \`NODE_OPTIONS="${
					inspectAndBreak ? '--inspect-brk' : '--inspect'
				}" fdt <command>\`.`
			);
		}
	}

	app.cli
		.addHiddenOption(
			new moduleRegistration.Option('fdt-inspect').setDescription(
				'Enable the Node.js inspector agent and output stack traces.'
			)
		)
		.addHiddenOption(
			new moduleRegistration.Option('fdt-inspect-brk').setDescription(
				'Enable the Node.js inspector agent, output stack traces, and break as soon as possible.'
			)
		)
		.addPreController(debugController);
};
