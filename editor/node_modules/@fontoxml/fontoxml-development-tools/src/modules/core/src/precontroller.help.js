import fs from 'fs-extra';
import path from 'path';


const NO_DESCRIPTION = '<no description>';

function sortByName(a, b) {
	return a.name < b.name ? -1 : 1;
}

function toParameterRow(param) {
	return [
		`<${param.name}>`,
		(param.description || NO_DESCRIPTION) +
			(param.required ? ' [required]' : ''),
	];
}

function toOptionRow(option) {
	return [
		`${option.short ? `-${option.short}` : '--'}  --${option.name}`,
		(option.description || NO_DESCRIPTION) +
			(option.required ? ' [required]' : ''),
	];
}

export default (moduleRegistration, app) => {
	function helpController(req, res) {
		const command = req.command;
		const isRoot = !command.parent;

		res.caption(
			isRoot
				? `${moduleRegistration.getAppInfo().name} --help`
				: `help for the ${command.name} command`
		);

		const props = [];
		props.push(['Command', command.getLongName()]);
		if (command.aliases.length) {
			props.push(['Aliases', command.aliases.join(', ')]);
		}
		if (command.description) {
			props.push(['Summary', command.description]);
		}

		if (props.length) {
			res.properties(props);
		}

		if (command.longDescription) {
			res.break();
			res.debug(command.longDescription);
		}

		const visibleChildren = command.children.filter((child) => {
			if (child.hidden) {
				return false;
			}

			if (
				child.hideIfMissingRequiredProductLicenses &&
				!req.fdt.license.hasProductLicenses(
					child.requiredProductLicenses
				)
			) {
				return false;
			}

			return true;
		});
		if (visibleChildren.length) {
			res.caption('Child commands');
			visibleChildren
				.sort(sortByName)
				.forEach((child) =>
					res.definition(child.name, child.description)
				);
		}

		if (command.parameters.length) {
			res.caption('Parameters');
			res.properties(command.parameters.map(toParameterRow));
		}

		const visibleOptions = command.options.filter(
			(option) => !option.hidden
		);
		if (visibleOptions.length) {
			res.caption('Options');
			res.properties(visibleOptions.sort(sortByName).map(toOptionRow));
		}

		const examples = command.examples;
		if (examples && examples.length) {
			res.caption('Examples');
			examples.forEach((example) => {
				res.definition(example.caption, example.content);
			});
		}
	}

	try {
		const packageJson = fs.readJsonSync(path.resolve(app.binPath, '..', 'package.json'));
		app.cli.setDescription(packageJson.description);
	} catch (_error) {
		// Do nothing.
	}
	app.cli
		.addOption(
			new moduleRegistration.IsolatedOption('help')
				.setShort('h')
				.setDescription(
					'Show usage information, works for any command.'
				)
		)
		.addPreController(async (req, res) => {
			if (
				!req.options.help &&
				!(req.command && req.command.isAsHelpCommand(req))
			) {
				return true;
			}

			// Make sure to run the FdtCommand precontroller to check licensing, on every command ancestry.
			const commandAncestry = [];
			let command = req.command;
			while (command) {
				if (
					command &&
					command.requiredProductLicenses &&
					command.requiredProductLicenses.length
				) {
					commandAncestry.unshift(command);
				}
				command = command.parent;
			}
			for (const ancestorCommand of commandAncestry) {
				req.fdt.license.ensureProductLicenses(
					ancestorCommand.requiredProductLicenses
				);
			}

			helpController.call(this, req, res);

			return false;
		});
};
