import path from 'path';
import { pathToFileURL } from 'url';

/** @typedef {import('../../../ModuleRegistrationApi').default} ModuleRegistrationApi */
/** @typedef {import('../../../request/FdtCommand').default} FdtCommand */

/**
 * @typedef AddBackendVersionsCommandsOptions
 *
 * @property {string} productLabel
 * @property {string} commandPrefix
 * @property {string} licenseProductName
 */

/**
 * @param {ModuleRegistrationApi}             moduleRegistration
 * @param {FdtCommand}                        command
 * @param {AddBackendVersionsCommandsOptions} options
 */
export default function addBackendVersionsCommands(
	moduleRegistration,
	command,
	options
) {
	const versionsCommand = command.addHiddenCommand(
		'versions',
		async (...args) => {
			const controllerFactory = (
				await import(
					pathToFileURL(
						path.resolve(
							moduleRegistration.getPathToModule(
								'@fontoxml/fontoxml-development-tools-module-shared',
							),
							'src',
							'controller-templates',
							'command.backend.versions.controller.factory.js',
						),
					)
				)
			).default;
			return controllerFactory(options)(...args);
		}
	);

	versionsCommand
		.setDescription(`List the available ${options.productLabel} versions.`)

		.addHiddenOption(
			'all',
			undefined,
			'Include nightly and prerelease versions.'
		)

		.addExample(
			`${moduleRegistration.getAppInfo().name} ${
				options.commandPrefix
			} versions`,
			`Request the available versions for ${options.productLabel}.`
		);

	const versionCommand = command.addCommand('version', async (...args) => {
		const controllerFactory = (
			await import(
				pathToFileURL(
					path.resolve(
						moduleRegistration.getPathToModule(
							'@fontoxml/fontoxml-development-tools-module-shared',
						),
						'src',
						'controller-templates',
						'command.backend.version.controller.factory.js',
					),
				)
			)
		).default;
		return controllerFactory(options)(...args);
	});

	const fdtVersion = moduleRegistration.getAppInfo().version;
	versionCommand
		.setDescription(
			`Show the version of the current ${options.productLabel} instance.`
		)

		.setRawOutput()
		.setRequiresBackendAppRepository(options.licenseProductName)

		.addOption(
			'format',
			'f',
			`Specify the preferred format of the current ${options.productLabel} instance. Available options are 'full', 'build', 'prerelease', 'core', 'patch', 'minor', and 'major'. By default, provides the 'full' version.`,
			false
		)

		.addExample(
			`${moduleRegistration.getAppInfo().name} editor version`,
			`Outputs the current ${
				options.productLabel
			} instance. E.g. "${moduleRegistration
				.getAppInfo()
				.version.format('core')}".`
		)
		.addExample(
			`${
				moduleRegistration.getAppInfo().name
			} editor version --format minor`,
			`Outputs the minor of the current ${
				options.productLabel
			} instance. E.g. "${
				fdtVersion.isUnversioned ? '8.2' : fdtVersion.format('minor')
			}".`
		);
}
