import executeAndLog, { VERBOSITY_LEVEL } from './executeAndLog.js';

/**
 * @typedef EnsureDockerCommandsOptions
 *
 * @property {boolean} [checkDocker=true]
 * @property {boolean} [checkDockerCompose=false]
 */

/**
 * Ensures that the Docker, and optionally also Docker compose, commands are available.
 *
 * NOTE: This does not check if Docker is running.
 *
 * @param {string}                      workingDirectory
 * @param {FdtResponse}                 res
 * @param {EnsureDockerCommandsOptions} [options={}]
 *
 * @returns {Promise<void>}
 */
export default async function ensureDockerCommands(
	workingDirectory,
	res,
	options = { checkDocker: true, checkDockerCompose: false }
) {
	if (options.checkDocker) {
		try {
			await executeAndLog(
				res,
				'docker',
				['-v'],
				workingDirectory,
				VERBOSITY_LEVEL.SILENT,
				false
			);
		} catch (_error) {
			throw new res.ErrorWithSolution(
				'Cannot run Docker commands.',
				'Please make sure Docker is installed. See: https://docs.docker.com/install/.'
			);
		}
	}

	if (options.checkDockerCompose) {
		try {
			await executeAndLog(
				res,
				'docker',
				['compose', 'version'],
				workingDirectory,
				VERBOSITY_LEVEL.SILENT,
				false
			);
		} catch (_error) {
			throw new res.ErrorWithSolution(
				'Cannot run Docker Compose commands.',
				'Please make sure the Docker Compose plugin is installed, which differs from the docker-compose standalone tool. See: https://docs.docker.com/compose/install/.'
			);
		}
	}
}
