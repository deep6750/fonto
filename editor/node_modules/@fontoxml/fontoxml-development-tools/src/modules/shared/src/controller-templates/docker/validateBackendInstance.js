import fs from 'fs-extra';
import path from 'path';

/** @typedef {import('../../../../../BackendAppRepository').default} BackendAppRepository */
/** @typedef {import('../../addBackendDockerCommands').AddBackendDockerCommandsOptions} AddBackendDockerCommandsOptions */

/**
 * @param {BackendAppRepository}            backendAppRepository
 * @param {AddBackendDockerCommandsOptions} options
 *
 * @return {Promise<void>}
 */
export default async function validateBackendInstance(
	backendAppRepository,
	options
) {
	const directoryPath = backendAppRepository.path;

	// Verify that the instance directory exists.
	if (!directoryPath || !(await fs.exists(directoryPath))) {
		throw new Error(`Directory "${directoryPath}" does not exist.`);
	}

	// Verify that the Manifest file exists.
	const manifestFilePath = path.join(directoryPath, options.manifestFileName);
	if (!(await fs.exists(manifestFilePath))) {
		throw new Error(
			`The ${options.manifestFileName} manifest file does not exist.`
		);
	}

	if (!backendAppRepository.sdkVersion) {
		throw new Error(
			`Could not get the version from the manifest's ${options.manifestVersionPropertyName} property.`
		);
	}

	// Verify that all required configuration files exist.
	await Promise.all(
		options.requiredConfiguration.map(async (entryName) => {
			const exists = await fs.exists(path.join(directoryPath, entryName));
			if (!exists) {
				throw new Error(
					`Directory "${directoryPath}" does not contain a valid ${options.productLabel} instance. Missing "${entryName}".`
				);
			}
		})
	);
}
