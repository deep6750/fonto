import path from 'path';
import { pathToFileURL } from 'url';

/** @typedef {import('../../../ModuleRegistrationApi').default} ModuleRegistrationApi */
/** @typedef {import('../../../request/FdtCommand').default} FdtCommand */

/**
 * @typedef AddBackendDownloadSelfContainedCommandsOptions
 *
 * @property {string} productLabel
 * @property {string} commandPrefix
 * @property {string} licenseProductName
 */

/**
 * @param {ModuleRegistrationApi}                          moduleRegistration
 * @param {FdtCommand}                                     command
 * @param {AddBackendDownloadSelfContainedCommandsOptions} options
 */
export default function addBackendDownloadSelfContainedCommands(
	moduleRegistration,
	command,
	options
) {
	const downloadSelfContainedCommand = command.addCommand(
		'download-self-contained',
		async (...args) => {
			const controllerFactory = (
				await import(
					pathToFileURL(
						path.resolve(
							moduleRegistration.getPathToModule(
								'@fontoxml/fontoxml-development-tools-module-shared',
							),
							'src',
							'controller-templates',
							'command.backend.download-self-contained.controller.factory.js',
						),
					)
				)
			).default;
			return controllerFactory(options)(...args);
		}
	);

	downloadSelfContainedCommand
		.addAlias('dsc')
		.setDescription('Downloads a self-contained build.')

		.addOption(
			'location',
			'l',
			'The directory where to save the self-contained build. If not set this defaults to the current working directory.',
			false
		)
		.addOption(
			'runtime',
			null,
			'The runtime to download. Supported runtimes might include: linux-x64, osx-x64, win-x64, linux-arm64, osx-arm64, win-arm64.',
			true
		)
		.addOption(
			'version',
			null,
			`The version of ${options.productLabel} to download, which defaults to the same version as FDT. Can be either a specific version within the same minor range of the current FDT version, or a "nightly" version. Be warned: nightly can be unstable or may not work at all.`
		)

		.addExample(
			`${moduleRegistration.getAppInfo().name} ${
				options.commandPrefix
			} download-self-contained --runtime linux-x64`,
			`Download the linux-x64 self-contained build for ${options.productLabel} into the current working directory using the version matching the current FDT version.`
		)
		.addExample(
			`${moduleRegistration.getAppInfo().name} ${
				options.commandPrefix
			} download-self-contained --runtime linux-x64 --location /opt/my-instance/`,
			`Download the linux-x64 self-contained build for ${options.productLabel} into "/opt/my-instance/" using the version matching the current FDT version.`
		);

	const runtimesCommand = command.addHiddenCommand(
		'runtimes',
		async (...args) => {
			const controllerFactory = (
				await import(
					pathToFileURL(
						path.resolve(
							moduleRegistration.getPathToModule(
								'@fontoxml/fontoxml-development-tools-module-shared',
							),
							'src',
							'controller-templates',
							'command.backend.runtimes.controller.factory.js',
						),
					)
				)
			).default;
			return controllerFactory(options)(...args);
		},
	);

	runtimesCommand
		.setDescription(`List the available ${options.productLabel} runtimes.`)

		.addOption(
			'version',
			null,
			`The version of ${options.productLabel} to get the runtimes for, which defaults to the same version as FDT. Can be either a specific version within the same minor range of the current FDT version, or a "nightly" version.`,
		)

		.addExample(
			`${moduleRegistration.getAppInfo().name} ${
				options.commandPrefix
			} runtimes`,
			`Request the available runtimes for ${options.productLabel}.`,
		);
}
